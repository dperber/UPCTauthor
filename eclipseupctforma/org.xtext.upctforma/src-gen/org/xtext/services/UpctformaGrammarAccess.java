/*
 * generated by Xtext 2.12.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UpctformaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ContentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.ContentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContentDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContentDefinitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPackageKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cImportsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_5_0_0 = (RuleCall)cImportsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cImportsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_5_1_1_0 = (RuleCall)cImportsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cTypesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cTypesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cTypesTypeParserRuleCall_6_2_0 = (RuleCall)cTypesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cTypesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_6_3_1_0 = (RuleCall)cTypesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cTemplatesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cTemplatesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cTemplatesTemplateDefParserRuleCall_7_2_0 = (RuleCall)cTemplatesAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cTemplatesAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cTemplatesTemplateDefParserRuleCall_7_3_1_0 = (RuleCall)cTemplatesAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cUnitAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cUnitUnitParserRuleCall_8_0 = (RuleCall)cUnitAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ContentDefinition:
		//	{ContentDefinition}
		//	'ContentDefinition'
		//	name=EString
		//	'{' ('package' name=QualifiedName ';')? (imports+=Import ("," imports+=Import)*)? ('types' '{' types+=Type (","
		//	types+=Type)* '}')? ('templates' '{' templates+=TemplateDef ("," templates+=TemplateDef)* '}')?
		//	unit=Unit?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ContentDefinition} 'ContentDefinition' name=EString '{' ('package' name=QualifiedName ';')? (imports+=Import (","
		//imports+=Import)*)? ('types' '{' types+=Type ("," types+=Type)* '}')? ('templates' '{' templates+=TemplateDef (","
		//templates+=TemplateDef)* '}')? unit=Unit? '}'
		public Group getGroup() { return cGroup; }
		
		//{ContentDefinition}
		public Action getContentDefinitionAction_0() { return cContentDefinitionAction_0; }
		
		//'ContentDefinition'
		public Keyword getContentDefinitionKeyword_1() { return cContentDefinitionKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('package' name=QualifiedName ';')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'package'
		public Keyword getPackageKeyword_4_0() { return cPackageKeyword_4_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_4_1_0() { return cNameQualifiedNameParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }
		
		//(imports+=Import ("," imports+=Import)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//imports+=Import
		public Assignment getImportsAssignment_5_0() { return cImportsAssignment_5_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_5_0_0() { return cImportsImportParserRuleCall_5_0_0; }
		
		//("," imports+=Import)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//imports+=Import
		public Assignment getImportsAssignment_5_1_1() { return cImportsAssignment_5_1_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_5_1_1_0() { return cImportsImportParserRuleCall_5_1_1_0; }
		
		//('types' '{' types+=Type ("," types+=Type)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'types'
		public Keyword getTypesKeyword_6_0() { return cTypesKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//types+=Type
		public Assignment getTypesAssignment_6_2() { return cTypesAssignment_6_2; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_6_2_0() { return cTypesTypeParserRuleCall_6_2_0; }
		
		//("," types+=Type)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//types+=Type
		public Assignment getTypesAssignment_6_3_1() { return cTypesAssignment_6_3_1; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_6_3_1_0() { return cTypesTypeParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//('templates' '{' templates+=TemplateDef ("," templates+=TemplateDef)* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'templates'
		public Keyword getTemplatesKeyword_7_0() { return cTemplatesKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//templates+=TemplateDef
		public Assignment getTemplatesAssignment_7_2() { return cTemplatesAssignment_7_2; }
		
		//TemplateDef
		public RuleCall getTemplatesTemplateDefParserRuleCall_7_2_0() { return cTemplatesTemplateDefParserRuleCall_7_2_0; }
		
		//("," templates+=TemplateDef)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//templates+=TemplateDef
		public Assignment getTemplatesAssignment_7_3_1() { return cTemplatesAssignment_7_3_1; }
		
		//TemplateDef
		public RuleCall getTemplatesTemplateDefParserRuleCall_7_3_1_0() { return cTemplatesTemplateDefParserRuleCall_7_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
		
		//unit=Unit?
		public Assignment getUnitAssignment_8() { return cUnitAssignment_8; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_8_0() { return cUnitUnitParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cType_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAggregatedTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWidgetTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cListTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Type:
		//	Type_Impl | SimpleType | AggregatedType | WidgetType | ListType;
		@Override public ParserRule getRule() { return rule; }
		
		//Type_Impl | SimpleType | AggregatedType | WidgetType | ListType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Type_Impl
		public RuleCall getType_ImplParserRuleCall_0() { return cType_ImplParserRuleCall_0; }
		
		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_1() { return cSimpleTypeParserRuleCall_1; }
		
		//AggregatedType
		public RuleCall getAggregatedTypeParserRuleCall_2() { return cAggregatedTypeParserRuleCall_2; }
		
		//WidgetType
		public RuleCall getWidgetTypeParserRuleCall_3() { return cWidgetTypeParserRuleCall_3; }
		
		//ListType
		public RuleCall getListTypeParserRuleCall_4() { return cListTypeParserRuleCall_4; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameter_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFixedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Parameter:
		//	Parameter_Impl | Fixed | Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameter_Impl | Fixed | Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parameter_Impl
		public RuleCall getParameter_ImplParserRuleCall_0() { return cParameter_ImplParserRuleCall_0; }
		
		//Fixed
		public RuleCall getFixedParserRuleCall_1() { return cFixedParserRuleCall_1; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_2() { return cVariableParserRuleCall_2; }
	}
	public class ContentElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.ContentElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContentElement_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColumnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWidgetParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTextParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cComposite_ImplParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVideoParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSimpleArgument_ImplParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cParameter_ImplParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRowParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFixedParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cVariableParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//ContentElement:
		//	ContentElement_Impl | Column | Image | Widget | Text | Composite_Impl | Video | SimpleArgument_Impl | Parameter_Impl
		//	| Row | Fixed | Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//ContentElement_Impl | Column | Image | Widget | Text | Composite_Impl | Video | SimpleArgument_Impl | Parameter_Impl |
		//Row | Fixed | Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ContentElement_Impl
		public RuleCall getContentElement_ImplParserRuleCall_0() { return cContentElement_ImplParserRuleCall_0; }
		
		//Column
		public RuleCall getColumnParserRuleCall_1() { return cColumnParserRuleCall_1; }
		
		//Image
		public RuleCall getImageParserRuleCall_2() { return cImageParserRuleCall_2; }
		
		//Widget
		public RuleCall getWidgetParserRuleCall_3() { return cWidgetParserRuleCall_3; }
		
		//Text
		public RuleCall getTextParserRuleCall_4() { return cTextParserRuleCall_4; }
		
		//Composite_Impl
		public RuleCall getComposite_ImplParserRuleCall_5() { return cComposite_ImplParserRuleCall_5; }
		
		//Video
		public RuleCall getVideoParserRuleCall_6() { return cVideoParserRuleCall_6; }
		
		//SimpleArgument_Impl
		public RuleCall getSimpleArgument_ImplParserRuleCall_7() { return cSimpleArgument_ImplParserRuleCall_7; }
		
		//Parameter_Impl
		public RuleCall getParameter_ImplParserRuleCall_8() { return cParameter_ImplParserRuleCall_8; }
		
		//Row
		public RuleCall getRowParserRuleCall_9() { return cRowParserRuleCall_9; }
		
		//Fixed
		public RuleCall getFixedParserRuleCall_10() { return cFixedParserRuleCall_10; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_11() { return cVariableParserRuleCall_11; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArgument_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWidgetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTextParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVideoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSimpleArgument_ImplParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTabParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAnimationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDragAndDropParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCompositeArgument_ImplParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Argument:
		//	Argument_Impl | Image | Widget | Text | Video | SimpleArgument_Impl | Tab | Animation | DragAndDrop |
		//	CompositeArgument_Impl;
		@Override public ParserRule getRule() { return rule; }
		
		//Argument_Impl | Image | Widget | Text | Video | SimpleArgument_Impl | Tab | Animation | DragAndDrop |
		//CompositeArgument_Impl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Argument_Impl
		public RuleCall getArgument_ImplParserRuleCall_0() { return cArgument_ImplParserRuleCall_0; }
		
		//Image
		public RuleCall getImageParserRuleCall_1() { return cImageParserRuleCall_1; }
		
		//Widget
		public RuleCall getWidgetParserRuleCall_2() { return cWidgetParserRuleCall_2; }
		
		//Text
		public RuleCall getTextParserRuleCall_3() { return cTextParserRuleCall_3; }
		
		//Video
		public RuleCall getVideoParserRuleCall_4() { return cVideoParserRuleCall_4; }
		
		//SimpleArgument_Impl
		public RuleCall getSimpleArgument_ImplParserRuleCall_5() { return cSimpleArgument_ImplParserRuleCall_5; }
		
		//Tab
		public RuleCall getTabParserRuleCall_6() { return cTabParserRuleCall_6; }
		
		//Animation
		public RuleCall getAnimationParserRuleCall_7() { return cAnimationParserRuleCall_7; }
		
		//DragAndDrop
		public RuleCall getDragAndDropParserRuleCall_8() { return cDragAndDropParserRuleCall_8; }
		
		//CompositeArgument_Impl
		public RuleCall getCompositeArgument_ImplParserRuleCall_9() { return cCompositeArgument_ImplParserRuleCall_9; }
	}
	public class SimpleArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.SimpleArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleArgument_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTextParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVideoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SimpleArgument SimpleElement:
		//	SimpleArgument_Impl | Image | Text | Video;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleArgument_Impl | Image | Text | Video
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleArgument_Impl
		public RuleCall getSimpleArgument_ImplParserRuleCall_0() { return cSimpleArgument_ImplParserRuleCall_0; }
		
		//Image
		public RuleCall getImageParserRuleCall_1() { return cImageParserRuleCall_1; }
		
		//Text
		public RuleCall getTextParserRuleCall_2() { return cTextParserRuleCall_2; }
		
		//Video
		public RuleCall getVideoParserRuleCall_3() { return cVideoParserRuleCall_3; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class TemplateDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.TemplateDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTemplateDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTemplateDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cRowsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cRowsRowParserRuleCall_4_0_0 = (RuleCall)cRowsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cRowsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cRowsRowParserRuleCall_4_1_1_0 = (RuleCall)cRowsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TemplateDef:
		//	{TemplateDef}
		//	'TemplateDef'
		//	name=EString
		//	'{' (rows+=Row ("," rows+=Row)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{TemplateDef} 'TemplateDef' name=EString '{' (rows+=Row ("," rows+=Row)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{TemplateDef}
		public Action getTemplateDefAction_0() { return cTemplateDefAction_0; }
		
		//'TemplateDef'
		public Keyword getTemplateDefKeyword_1() { return cTemplateDefKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(rows+=Row ("," rows+=Row)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//rows+=Row
		public Assignment getRowsAssignment_4_0() { return cRowsAssignment_4_0; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_4_0_0() { return cRowsRowParserRuleCall_4_0_0; }
		
		//("," rows+=Row)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//rows+=Row
		public Assignment getRowsAssignment_4_1_1() { return cRowsAssignment_4_1_1; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_4_1_1_0() { return cRowsRowParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAuthorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAuthorEStringParserRuleCall_2_0 = (RuleCall)cAuthorAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSectionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSectionsSectionParserRuleCall_4_0 = (RuleCall)cSectionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSectionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSectionsSectionParserRuleCall_5_1_0 = (RuleCall)cSectionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Unit:
		//	'Unit'
		//	name=EString
		//	author=EString
		//	'{'
		//	sections+=Section ("," sections+=Section)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Unit' name=EString author=EString '{' sections+=Section ("," sections+=Section)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Unit'
		public Keyword getUnitKeyword_0() { return cUnitKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//author=EString
		public Assignment getAuthorAssignment_2() { return cAuthorAssignment_2; }
		
		//EString
		public RuleCall getAuthorEStringParserRuleCall_2_0() { return cAuthorEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//sections+=Section
		public Assignment getSectionsAssignment_4() { return cSectionsAssignment_4; }
		
		//Section
		public RuleCall getSectionsSectionParserRuleCall_4_0() { return cSectionsSectionParserRuleCall_4_0; }
		
		//("," sections+=Section)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//sections+=Section
		public Assignment getSectionsAssignment_5_1() { return cSectionsAssignment_5_1; }
		
		//Section
		public RuleCall getSectionsSectionParserRuleCall_5_1_0() { return cSectionsSectionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class Type_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Type_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Type_Impl Type:
		//	{Type}
		//	'Type'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Type} 'Type' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Type}
		public Action getTypeAction_0() { return cTypeAction_0; }
		
		//'Type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cColumnsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cColumnsColumnParserRuleCall_3_0_0 = (RuleCall)cColumnsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cColumnsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_3_1_1_0 = (RuleCall)cColumnsAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUsetemplateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUsetemplateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUsetemplateUseTemplateParserRuleCall_4_1_0 = (RuleCall)cUsetemplateAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Row:
		//	{Row}
		//	'row'
		//	'{' (columns+=Column ("," columns+=Column)*)? ('usetemplate' usetemplate=UseTemplate)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Row} 'row' '{' (columns+=Column ("," columns+=Column)*)? ('usetemplate' usetemplate=UseTemplate)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Row}
		public Action getRowAction_0() { return cRowAction_0; }
		
		//'row'
		public Keyword getRowKeyword_1() { return cRowKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(columns+=Column ("," columns+=Column)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_3_0() { return cColumnsAssignment_3_0; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_3_0_0() { return cColumnsColumnParserRuleCall_3_0_0; }
		
		//("," columns+=Column)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_3_1_1() { return cColumnsAssignment_3_1_1; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_3_1_1_0() { return cColumnsColumnParserRuleCall_3_1_1_0; }
		
		//('usetemplate' usetemplate=UseTemplate)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'usetemplate'
		public Keyword getUsetemplateKeyword_4_0() { return cUsetemplateKeyword_4_0; }
		
		//usetemplate=UseTemplate
		public Assignment getUsetemplateAssignment_4_1() { return cUsetemplateAssignment_4_1; }
		
		//UseTemplate
		public RuleCall getUsetemplateUseTemplateParserRuleCall_4_1_0() { return cUsetemplateUseTemplateParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColumnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWidthKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWidthAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWidthEStringParserRuleCall_3_1_0 = (RuleCall)cWidthAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cElementsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cElementsContentElementParserRuleCall_4_0_0 = (RuleCall)cElementsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cElementsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cElementsContentElementParserRuleCall_4_1_1_0 = (RuleCall)cElementsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Column:
		//	{Column}
		//	'column'
		//	'{' ('width' width=EString)? (elements+=ContentElement ("," elements+=ContentElement)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Column} 'column' '{' ('width' width=EString)? (elements+=ContentElement ("," elements+=ContentElement)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Column}
		public Action getColumnAction_0() { return cColumnAction_0; }
		
		//'column'
		public Keyword getColumnKeyword_1() { return cColumnKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('width' width=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'width'
		public Keyword getWidthKeyword_3_0() { return cWidthKeyword_3_0; }
		
		//width=EString
		public Assignment getWidthAssignment_3_1() { return cWidthAssignment_3_1; }
		
		//EString
		public RuleCall getWidthEStringParserRuleCall_3_1_0() { return cWidthEStringParserRuleCall_3_1_0; }
		
		//(elements+=ContentElement ("," elements+=ContentElement)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//elements+=ContentElement
		public Assignment getElementsAssignment_4_0() { return cElementsAssignment_4_0; }
		
		//ContentElement
		public RuleCall getElementsContentElementParserRuleCall_4_0_0() { return cElementsContentElementParserRuleCall_4_0_0; }
		
		//("," elements+=ContentElement)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//elements+=ContentElement
		public Assignment getElementsAssignment_4_1_1() { return cElementsAssignment_4_1_1; }
		
		//ContentElement
		public RuleCall getElementsContentElementParserRuleCall_4_1_1_0() { return cElementsContentElementParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class UseTemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.UseTemplate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUseTemplateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypetemplateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypetemplateTemplateDefCrossReference_1_0 = (CrossReference)cTypetemplateAssignment_1.eContents().get(0);
		private final RuleCall cTypetemplateTemplateDefEStringParserRuleCall_1_0_1 = (RuleCall)cTypetemplateTemplateDefCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UseTemplate:
		//	{UseTemplate} typetemplate=[TemplateDef|EString]? ('{' arguments+=Argument ("," arguments+=Argument)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{UseTemplate} typetemplate=[TemplateDef|EString]? ('{' arguments+=Argument ("," arguments+=Argument)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{UseTemplate}
		public Action getUseTemplateAction_0() { return cUseTemplateAction_0; }
		
		//typetemplate=[TemplateDef|EString]?
		public Assignment getTypetemplateAssignment_1() { return cTypetemplateAssignment_1; }
		
		//[TemplateDef|EString]
		public CrossReference getTypetemplateTemplateDefCrossReference_1_0() { return cTypetemplateTemplateDefCrossReference_1_0; }
		
		//EString
		public RuleCall getTypetemplateTemplateDefEStringParserRuleCall_1_0_1() { return cTypetemplateTemplateDefEStringParserRuleCall_1_0_1; }
		
		//('{' arguments+=Argument ("," arguments+=Argument)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_2_1_0() { return cArgumentsArgumentParserRuleCall_2_1_0; }
		
		//("," arguments+=Argument)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_2_2_1() { return cArgumentsAssignment_2_2_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_2_2_1_0() { return cArgumentsArgumentParserRuleCall_2_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ContentElement_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.ContentElement_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContentElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContentElementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ContentElement_Impl ContentElement:
		//	{ContentElement}
		//	'ContentElement';
		@Override public ParserRule getRule() { return rule; }
		
		//{ContentElement} 'ContentElement'
		public Group getGroup() { return cGroup; }
		
		//{ContentElement}
		public Action getContentElementAction_0() { return cContentElementAction_0; }
		
		//'ContentElement'
		public Keyword getContentElementKeyword_1() { return cContentElementKeyword_1; }
	}
	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUrlKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUrlAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUrlEStringParserRuleCall_3_1_0 = (RuleCall)cUrlAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Image:
		//	{Image}
		//	'Image'
		//	'{' ('url' url=EString)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Image} 'Image' '{' ('url' url=EString)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Image}
		public Action getImageAction_0() { return cImageAction_0; }
		
		//'Image'
		public Keyword getImageKeyword_1() { return cImageKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('url' url=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'url'
		public Keyword getUrlKeyword_3_0() { return cUrlKeyword_3_0; }
		
		//url=EString
		public Assignment getUrlAssignment_3_1() { return cUrlAssignment_3_1; }
		
		//EString
		public RuleCall getUrlEStringParserRuleCall_3_1_0() { return cUrlEStringParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class WidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Widget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWidgetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWidgettypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cWidgettypeWidgetTypeCrossReference_3_0 = (CrossReference)cWidgettypeAssignment_3.eContents().get(0);
		private final RuleCall cWidgettypeWidgetTypeEStringParserRuleCall_3_0_1 = (RuleCall)cWidgettypeWidgetTypeCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWidgetargumentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWidgetargumentsArgumentParserRuleCall_4_1_0 = (RuleCall)cWidgetargumentsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cWidgetargumentsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cWidgetargumentsArgumentParserRuleCall_4_2_1_0 = (RuleCall)cWidgetargumentsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Widget:
		//	'Widget'
		//	name=EString
		//	'type' widgettype=[WidgetType|EString] ('{' widgetarguments+=Argument ("," widgetarguments+=Argument)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Widget' name=EString 'type' widgettype=[WidgetType|EString] ('{' widgetarguments+=Argument (","
		//widgetarguments+=Argument)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'Widget'
		public Keyword getWidgetKeyword_0() { return cWidgetKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//widgettype=[WidgetType|EString]
		public Assignment getWidgettypeAssignment_3() { return cWidgettypeAssignment_3; }
		
		//[WidgetType|EString]
		public CrossReference getWidgettypeWidgetTypeCrossReference_3_0() { return cWidgettypeWidgetTypeCrossReference_3_0; }
		
		//EString
		public RuleCall getWidgettypeWidgetTypeEStringParserRuleCall_3_0_1() { return cWidgettypeWidgetTypeEStringParserRuleCall_3_0_1; }
		
		//('{' widgetarguments+=Argument ("," widgetarguments+=Argument)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//widgetarguments+=Argument
		public Assignment getWidgetargumentsAssignment_4_1() { return cWidgetargumentsAssignment_4_1; }
		
		//Argument
		public RuleCall getWidgetargumentsArgumentParserRuleCall_4_1_0() { return cWidgetargumentsArgumentParserRuleCall_4_1_0; }
		
		//("," widgetarguments+=Argument)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//widgetarguments+=Argument
		public Assignment getWidgetargumentsAssignment_4_2_1() { return cWidgetargumentsAssignment_4_2_1; }
		
		//Argument
		public RuleCall getWidgetargumentsArgumentParserRuleCall_4_2_1_0() { return cWidgetargumentsArgumentParserRuleCall_4_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParagraphsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParagraphsParagraphParserRuleCall_2_0 = (RuleCall)cParagraphsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParagraphsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParagraphsParagraphParserRuleCall_3_1_0 = (RuleCall)cParagraphsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Text:
		//	'Text'
		//	'{'
		//	paragraphs+=Paragraph ("," paragraphs+=Paragraph)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Text' '{' paragraphs+=Paragraph ("," paragraphs+=Paragraph)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Text'
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//paragraphs+=Paragraph
		public Assignment getParagraphsAssignment_2() { return cParagraphsAssignment_2; }
		
		//Paragraph
		public RuleCall getParagraphsParagraphParserRuleCall_2_0() { return cParagraphsParagraphParserRuleCall_2_0; }
		
		//("," paragraphs+=Paragraph)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//paragraphs+=Paragraph
		public Assignment getParagraphsAssignment_3_1() { return cParagraphsAssignment_3_1; }
		
		//Paragraph
		public RuleCall getParagraphsParagraphParserRuleCall_3_1_0() { return cParagraphsParagraphParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class Composite_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Composite_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCompositeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Composite_Impl Composite:
		//	{Composite}
		//	'Composite';
		@Override public ParserRule getRule() { return rule; }
		
		//{Composite} 'Composite'
		public Group getGroup() { return cGroup; }
		
		//{Composite}
		public Action getCompositeAction_0() { return cCompositeAction_0; }
		
		//'Composite'
		public Keyword getCompositeKeyword_1() { return cCompositeKeyword_1; }
	}
	public class VideoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Video");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVideoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVideoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUrlKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUrlAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUrlEStringParserRuleCall_3_1_0 = (RuleCall)cUrlAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Video:
		//	{Video}
		//	'Video'
		//	'{' ('url' url=EString)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Video} 'Video' '{' ('url' url=EString)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Video}
		public Action getVideoAction_0() { return cVideoAction_0; }
		
		//'Video'
		public Keyword getVideoKeyword_1() { return cVideoKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('url' url=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'url'
		public Keyword getUrlKeyword_3_0() { return cUrlKeyword_3_0; }
		
		//url=EString
		public Assignment getUrlAssignment_3_1() { return cUrlAssignment_3_1; }
		
		//EString
		public RuleCall getUrlEStringParserRuleCall_3_1_0() { return cUrlEStringParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SimpleArgument_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.SimpleArgument_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSimpleArgumentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SimpleArgument_Impl SimpleElement:
		//	{SimpleElement}
		//	'SimpleArgument';
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleElement} 'SimpleArgument'
		public Group getGroup() { return cGroup; }
		
		//{SimpleElement}
		public Action getSimpleElementAction_0() { return cSimpleElementAction_0; }
		
		//'SimpleArgument'
		public Keyword getSimpleArgumentKeyword_1() { return cSimpleArgumentKeyword_1; }
	}
	public class Parameter_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Parameter_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Parameter_Impl Parameter:
		//	{Parameter}
		//	'Parameter';
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter} 'Parameter'
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//'Parameter'
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }
	}
	public class FixedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Fixed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFixedAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParamKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		
		//Fixed:
		//	{Fixed}
		//	'Param'
		//	type=[Type|EString]?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Fixed} 'Param' type=[Type|EString]?
		public Group getGroup() { return cGroup; }
		
		//{Fixed}
		public Action getFixedAction_0() { return cFixedAction_0; }
		
		//'Param'
		public Keyword getParamKeyword_1() { return cParamKeyword_1; }
		
		//type=[Type|EString]?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Type|EString]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }
		
		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_2_0_1() { return cTypeTypeEStringParserRuleCall_2_0_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarParamKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		
		//Variable:
		//	{Variable}
		//	'VarParam'
		//	type=[Type|EString]?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable} 'VarParam' type=[Type|EString]?
		public Group getGroup() { return cGroup; }
		
		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//'VarParam'
		public Keyword getVarParamKeyword_1() { return cVarParamKeyword_1; }
		
		//type=[Type|EString]?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Type|EString]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }
		
		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_2_0_1() { return cTypeTypeEStringParserRuleCall_2_0_1; }
	}
	public class Argument_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Argument_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cArgumentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Argument_Impl Argument:
		//	{Argument}
		//	'Argument';
		@Override public ParserRule getRule() { return rule; }
		
		//{Argument} 'Argument'
		public Group getGroup() { return cGroup; }
		
		//{Argument}
		public Action getArgumentAction_0() { return cArgumentAction_0; }
		
		//'Argument'
		public Keyword getArgumentKeyword_1() { return cArgumentKeyword_1; }
	}
	public class TabElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Tab");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTabAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTabKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsSimpleArgumentParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsSimpleArgumentParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Tab:
		//	{Tab}
		//	'Tab'
		//	'{' (arguments+=SimpleArgument ("," arguments+=SimpleArgument)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Tab} 'Tab' '{' (arguments+=SimpleArgument ("," arguments+=SimpleArgument)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Tab}
		public Action getTabAction_0() { return cTabAction_0; }
		
		//'Tab'
		public Keyword getTabKeyword_1() { return cTabKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(arguments+=SimpleArgument ("," arguments+=SimpleArgument)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//arguments+=SimpleArgument
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }
		
		//SimpleArgument
		public RuleCall getArgumentsSimpleArgumentParserRuleCall_3_0_0() { return cArgumentsSimpleArgumentParserRuleCall_3_0_0; }
		
		//("," arguments+=SimpleArgument)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//arguments+=SimpleArgument
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//SimpleArgument
		public RuleCall getArgumentsSimpleArgumentParserRuleCall_3_1_1_0() { return cArgumentsSimpleArgumentParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AnimationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Animation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnimationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAnimationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWidthKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWidthAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cWidthEStringParserRuleCall_3_1_0 = (RuleCall)cWidthAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImageKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImageAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImageEStringParserRuleCall_4_1_0 = (RuleCall)cImageAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cArgumentsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cArgumentsSimpleArgumentParserRuleCall_5_0_0 = (RuleCall)cArgumentsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cArgumentsSimpleArgumentParserRuleCall_5_1_1_0 = (RuleCall)cArgumentsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Animation:
		//	{Animation}
		//	'Animation'
		//	'{' ('width' width=EString)? ('image' image=EString)? (arguments+=SimpleArgument ("," arguments+=SimpleArgument)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Animation} 'Animation' '{' ('width' width=EString)? ('image' image=EString)? (arguments+=SimpleArgument (","
		//arguments+=SimpleArgument)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Animation}
		public Action getAnimationAction_0() { return cAnimationAction_0; }
		
		//'Animation'
		public Keyword getAnimationKeyword_1() { return cAnimationKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('width' width=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'width'
		public Keyword getWidthKeyword_3_0() { return cWidthKeyword_3_0; }
		
		//width=EString
		public Assignment getWidthAssignment_3_1() { return cWidthAssignment_3_1; }
		
		//EString
		public RuleCall getWidthEStringParserRuleCall_3_1_0() { return cWidthEStringParserRuleCall_3_1_0; }
		
		//('image' image=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'image'
		public Keyword getImageKeyword_4_0() { return cImageKeyword_4_0; }
		
		//image=EString
		public Assignment getImageAssignment_4_1() { return cImageAssignment_4_1; }
		
		//EString
		public RuleCall getImageEStringParserRuleCall_4_1_0() { return cImageEStringParserRuleCall_4_1_0; }
		
		//(arguments+=SimpleArgument ("," arguments+=SimpleArgument)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//arguments+=SimpleArgument
		public Assignment getArgumentsAssignment_5_0() { return cArgumentsAssignment_5_0; }
		
		//SimpleArgument
		public RuleCall getArgumentsSimpleArgumentParserRuleCall_5_0_0() { return cArgumentsSimpleArgumentParserRuleCall_5_0_0; }
		
		//("," arguments+=SimpleArgument)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//arguments+=SimpleArgument
		public Assignment getArgumentsAssignment_5_1_1() { return cArgumentsAssignment_5_1_1; }
		
		//SimpleArgument
		public RuleCall getArgumentsSimpleArgumentParserRuleCall_5_1_1_0() { return cArgumentsSimpleArgumentParserRuleCall_5_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DragAndDropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.DragAndDrop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDragAndDropAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDragAndDropKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsSimpleArgumentParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsSimpleArgumentParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DragAndDrop:
		//	{DragAndDrop}
		//	'DragAndDrop'
		//	'{' (arguments+=SimpleArgument ("," arguments+=SimpleArgument)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DragAndDrop} 'DragAndDrop' '{' (arguments+=SimpleArgument ("," arguments+=SimpleArgument)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{DragAndDrop}
		public Action getDragAndDropAction_0() { return cDragAndDropAction_0; }
		
		//'DragAndDrop'
		public Keyword getDragAndDropKeyword_1() { return cDragAndDropKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(arguments+=SimpleArgument ("," arguments+=SimpleArgument)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//arguments+=SimpleArgument
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }
		
		//SimpleArgument
		public RuleCall getArgumentsSimpleArgumentParserRuleCall_3_0_0() { return cArgumentsSimpleArgumentParserRuleCall_3_0_0; }
		
		//("," arguments+=SimpleArgument)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//arguments+=SimpleArgument
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//SimpleArgument
		public RuleCall getArgumentsSimpleArgumentParserRuleCall_3_1_1_0() { return cArgumentsSimpleArgumentParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CompositeArgument_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.CompositeArgument_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCompositeArgumentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cArgumentsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cArgumentsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cArgumentsSimpleArgumentParserRuleCall_3_2_0 = (RuleCall)cArgumentsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cArgumentsSimpleArgumentParserRuleCall_3_3_1_0 = (RuleCall)cArgumentsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CompositeArgument_Impl CompositeArgument:
		//	{CompositeArgument}
		//	'CompositeArgument'
		//	'{' ('arguments' '{' arguments+=SimpleArgument ("," arguments+=SimpleArgument)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{CompositeArgument} 'CompositeArgument' '{' ('arguments' '{' arguments+=SimpleArgument ("," arguments+=SimpleArgument)*
		//'}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{CompositeArgument}
		public Action getCompositeArgumentAction_0() { return cCompositeArgumentAction_0; }
		
		//'CompositeArgument'
		public Keyword getCompositeArgumentKeyword_1() { return cCompositeArgumentKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('arguments' '{' arguments+=SimpleArgument ("," arguments+=SimpleArgument)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'arguments'
		public Keyword getArgumentsKeyword_3_0() { return cArgumentsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//arguments+=SimpleArgument
		public Assignment getArgumentsAssignment_3_2() { return cArgumentsAssignment_3_2; }
		
		//SimpleArgument
		public RuleCall getArgumentsSimpleArgumentParserRuleCall_3_2_0() { return cArgumentsSimpleArgumentParserRuleCall_3_2_0; }
		
		//("," arguments+=SimpleArgument)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//arguments+=SimpleArgument
		public Assignment getArgumentsAssignment_3_3_1() { return cArgumentsAssignment_3_3_1; }
		
		//SimpleArgument
		public RuleCall getArgumentsSimpleArgumentParserRuleCall_3_3_1_0() { return cArgumentsSimpleArgumentParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ParagraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Paragraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParagraphAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_1_1_0 = (RuleCall)cTextAssignment_1_1.eContents().get(0);
		
		//Paragraph:
		//	{Paragraph} ('p' text=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Paragraph} ('p' text=EString)?
		public Group getGroup() { return cGroup; }
		
		//{Paragraph}
		public Action getParagraphAction_0() { return cParagraphAction_0; }
		
		//('p' text=EString)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'p'
		public Keyword getPKeyword_1_0() { return cPKeyword_1_0; }
		
		//text=EString
		public Assignment getTextAssignment_1_1() { return cTextAssignment_1_1; }
		
		//EString
		public RuleCall getTextEStringParserRuleCall_1_1_0() { return cTextEStringParserRuleCall_1_1_0; }
	}
	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.SimpleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeSimpleElementEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//SimpleType:
		//	{SimpleType} name=EString
		//	type=TypeSimpleElement?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleType} name=EString type=TypeSimpleElement?
		public Group getGroup() { return cGroup; }
		
		//{SimpleType}
		public Action getSimpleTypeAction_0() { return cSimpleTypeAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//type=TypeSimpleElement?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeSimpleElement
		public RuleCall getTypeTypeSimpleElementEnumRuleCall_2_0() { return cTypeTypeSimpleElementEnumRuleCall_2_0; }
	}
	public class AggregatedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.AggregatedType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAggregatedTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTypeSimpleTypeParserRuleCall_3_0_0 = (RuleCall)cTypeAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTypeAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTypeSimpleTypeParserRuleCall_3_1_1_0 = (RuleCall)cTypeAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AggregatedType:
		//	{AggregatedType} name=EString
		//	'{' (type+=SimpleType ("," type+=SimpleType)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{AggregatedType} name=EString '{' (type+=SimpleType ("," type+=SimpleType)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{AggregatedType}
		public Action getAggregatedTypeAction_0() { return cAggregatedTypeAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(type+=SimpleType ("," type+=SimpleType)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//type+=SimpleType
		public Assignment getTypeAssignment_3_0() { return cTypeAssignment_3_0; }
		
		//SimpleType
		public RuleCall getTypeSimpleTypeParserRuleCall_3_0_0() { return cTypeSimpleTypeParserRuleCall_3_0_0; }
		
		//("," type+=SimpleType)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//type+=SimpleType
		public Assignment getTypeAssignment_3_1_1() { return cTypeAssignment_3_1_1; }
		
		//SimpleType
		public RuleCall getTypeSimpleTypeParserRuleCall_3_1_1_0() { return cTypeSimpleTypeParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class WidgetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.WidgetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWidgetTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWidgetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WidgetType:
		//	{WidgetType}
		//	'widget'
		//	name=EString
		//	'{' (parameters+=Parameter ("," parameters+=Parameter)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{WidgetType} 'widget' name=EString '{' (parameters+=Parameter ("," parameters+=Parameter)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{WidgetType}
		public Action getWidgetTypeAction_0() { return cWidgetTypeAction_0; }
		
		//'widget'
		public Keyword getWidgetKeyword_1() { return cWidgetKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_0_0() { return cParametersParameterParserRuleCall_4_0_0; }
		
		//("," parameters+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_1_0() { return cParametersParameterParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.ListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cListKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cListtypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cListtypeSimpleTypeCrossReference_3_0 = (CrossReference)cListtypeAssignment_3.eContents().get(0);
		private final RuleCall cListtypeSimpleTypeEStringParserRuleCall_3_0_1 = (RuleCall)cListtypeSimpleTypeCrossReference_3_0.eContents().get(1);
		
		//ListType:
		//	{ListType}
		//	'List'
		//	name=EString
		//	listtype=[SimpleType|EString]?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ListType} 'List' name=EString listtype=[SimpleType|EString]?
		public Group getGroup() { return cGroup; }
		
		//{ListType}
		public Action getListTypeAction_0() { return cListTypeAction_0; }
		
		//'List'
		public Keyword getListKeyword_1() { return cListKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//listtype=[SimpleType|EString]?
		public Assignment getListtypeAssignment_3() { return cListtypeAssignment_3; }
		
		//[SimpleType|EString]
		public CrossReference getListtypeSimpleTypeCrossReference_3_0() { return cListtypeSimpleTypeCrossReference_3_0; }
		
		//EString
		public RuleCall getListtypeSimpleTypeEStringParserRuleCall_3_0_1() { return cListtypeSimpleTypeEStringParserRuleCall_3_0_1; }
	}
	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.Section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImageKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImageAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImageEStringParserRuleCall_4_1_0 = (RuleCall)cImageAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTitleKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTitleAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_5_1_0 = (RuleCall)cTitleAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cRowsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cRowsRowParserRuleCall_6_0_0 = (RuleCall)cRowsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cRowsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cRowsRowParserRuleCall_6_1_1_0 = (RuleCall)cRowsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Section:
		//	{Section}
		//	'Section'
		//	name=EString
		//	'{' ('image' image=EString)? ('title' title=EString)? (rows+=Row ("," rows+=Row)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Section} 'Section' name=EString '{' ('image' image=EString)? ('title' title=EString)? (rows+=Row ("," rows+=Row)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Section}
		public Action getSectionAction_0() { return cSectionAction_0; }
		
		//'Section'
		public Keyword getSectionKeyword_1() { return cSectionKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('image' image=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'image'
		public Keyword getImageKeyword_4_0() { return cImageKeyword_4_0; }
		
		//image=EString
		public Assignment getImageAssignment_4_1() { return cImageAssignment_4_1; }
		
		//EString
		public RuleCall getImageEStringParserRuleCall_4_1_0() { return cImageEStringParserRuleCall_4_1_0; }
		
		//('title' title=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'title'
		public Keyword getTitleKeyword_5_0() { return cTitleKeyword_5_0; }
		
		//title=EString
		public Assignment getTitleAssignment_5_1() { return cTitleAssignment_5_1; }
		
		//EString
		public RuleCall getTitleEStringParserRuleCall_5_1_0() { return cTitleEStringParserRuleCall_5_1_0; }
		
		//(rows+=Row ("," rows+=Row)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//rows+=Row
		public Assignment getRowsAssignment_6_0() { return cRowsAssignment_6_0; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_6_0_0() { return cRowsRowParserRuleCall_6_0_0; }
		
		//("," rows+=Row)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//rows+=Row
		public Assignment getRowsAssignment_6_1_1() { return cRowsAssignment_6_1_1; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_6_1_1_0() { return cRowsRowParserRuleCall_6_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	
	public class TypeSimpleElementElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Upctforma.TypeSimpleElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTextEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTextTextKeyword_0_0 = (Keyword)cTextEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cImageEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cImageImageKeyword_1_0 = (Keyword)cImageEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cVideoEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cVideoVideoKeyword_2_0 = (Keyword)cVideoEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cUndefinedEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cUndefinedUndefinedKeyword_3_0 = (Keyword)cUndefinedEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TypeSimpleElement:
		//	Text | Image | Video | Undefined;
		public EnumRule getRule() { return rule; }
		
		//Text | Image | Video | Undefined
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Text
		public EnumLiteralDeclaration getTextEnumLiteralDeclaration_0() { return cTextEnumLiteralDeclaration_0; }
		
		//'Text'
		public Keyword getTextTextKeyword_0_0() { return cTextTextKeyword_0_0; }
		
		//Image
		public EnumLiteralDeclaration getImageEnumLiteralDeclaration_1() { return cImageEnumLiteralDeclaration_1; }
		
		//'Image'
		public Keyword getImageImageKeyword_1_0() { return cImageImageKeyword_1_0; }
		
		//Video
		public EnumLiteralDeclaration getVideoEnumLiteralDeclaration_2() { return cVideoEnumLiteralDeclaration_2; }
		
		//'Video'
		public Keyword getVideoVideoKeyword_2_0() { return cVideoVideoKeyword_2_0; }
		
		//Undefined
		public EnumLiteralDeclaration getUndefinedEnumLiteralDeclaration_3() { return cUndefinedEnumLiteralDeclaration_3; }
		
		//'Undefined'
		public Keyword getUndefinedUndefinedKeyword_3_0() { return cUndefinedUndefinedKeyword_3_0; }
	}
	
	private final ContentDefinitionElements pContentDefinition;
	private final QualifiedNameElements pQualifiedName;
	private final ImportElements pImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final TypeElements pType;
	private final ParameterElements pParameter;
	private final ContentElementElements pContentElement;
	private final ArgumentElements pArgument;
	private final SimpleArgumentElements pSimpleArgument;
	private final EStringElements pEString;
	private final TemplateDefElements pTemplateDef;
	private final UnitElements pUnit;
	private final Type_ImplElements pType_Impl;
	private final RowElements pRow;
	private final ColumnElements pColumn;
	private final UseTemplateElements pUseTemplate;
	private final ContentElement_ImplElements pContentElement_Impl;
	private final ImageElements pImage;
	private final WidgetElements pWidget;
	private final TextElements pText;
	private final Composite_ImplElements pComposite_Impl;
	private final VideoElements pVideo;
	private final SimpleArgument_ImplElements pSimpleArgument_Impl;
	private final Parameter_ImplElements pParameter_Impl;
	private final FixedElements pFixed;
	private final VariableElements pVariable;
	private final Argument_ImplElements pArgument_Impl;
	private final TabElements pTab;
	private final AnimationElements pAnimation;
	private final DragAndDropElements pDragAndDrop;
	private final CompositeArgument_ImplElements pCompositeArgument_Impl;
	private final ParagraphElements pParagraph;
	private final TypeSimpleElementElements eTypeSimpleElement;
	private final SimpleTypeElements pSimpleType;
	private final AggregatedTypeElements pAggregatedType;
	private final WidgetTypeElements pWidgetType;
	private final ListTypeElements pListType;
	private final SectionElements pSection;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UpctformaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pContentDefinition = new ContentDefinitionElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pType = new TypeElements();
		this.pParameter = new ParameterElements();
		this.pContentElement = new ContentElementElements();
		this.pArgument = new ArgumentElements();
		this.pSimpleArgument = new SimpleArgumentElements();
		this.pEString = new EStringElements();
		this.pTemplateDef = new TemplateDefElements();
		this.pUnit = new UnitElements();
		this.pType_Impl = new Type_ImplElements();
		this.pRow = new RowElements();
		this.pColumn = new ColumnElements();
		this.pUseTemplate = new UseTemplateElements();
		this.pContentElement_Impl = new ContentElement_ImplElements();
		this.pImage = new ImageElements();
		this.pWidget = new WidgetElements();
		this.pText = new TextElements();
		this.pComposite_Impl = new Composite_ImplElements();
		this.pVideo = new VideoElements();
		this.pSimpleArgument_Impl = new SimpleArgument_ImplElements();
		this.pParameter_Impl = new Parameter_ImplElements();
		this.pFixed = new FixedElements();
		this.pVariable = new VariableElements();
		this.pArgument_Impl = new Argument_ImplElements();
		this.pTab = new TabElements();
		this.pAnimation = new AnimationElements();
		this.pDragAndDrop = new DragAndDropElements();
		this.pCompositeArgument_Impl = new CompositeArgument_ImplElements();
		this.pParagraph = new ParagraphElements();
		this.eTypeSimpleElement = new TypeSimpleElementElements();
		this.pSimpleType = new SimpleTypeElements();
		this.pAggregatedType = new AggregatedTypeElements();
		this.pWidgetType = new WidgetTypeElements();
		this.pListType = new ListTypeElements();
		this.pSection = new SectionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Upctforma".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ContentDefinition:
	//	{ContentDefinition}
	//	'ContentDefinition'
	//	name=EString
	//	'{' ('package' name=QualifiedName ';')? (imports+=Import ("," imports+=Import)*)? ('types' '{' types+=Type (","
	//	types+=Type)* '}')? ('templates' '{' templates+=TemplateDef ("," templates+=TemplateDef)* '}')?
	//	unit=Unit?
	//	'}';
	public ContentDefinitionElements getContentDefinitionAccess() {
		return pContentDefinition;
	}
	
	public ParserRule getContentDefinitionRule() {
		return getContentDefinitionAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//Type:
	//	Type_Impl | SimpleType | AggregatedType | WidgetType | ListType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Parameter:
	//	Parameter_Impl | Fixed | Variable;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ContentElement:
	//	ContentElement_Impl | Column | Image | Widget | Text | Composite_Impl | Video | SimpleArgument_Impl | Parameter_Impl
	//	| Row | Fixed | Variable;
	public ContentElementElements getContentElementAccess() {
		return pContentElement;
	}
	
	public ParserRule getContentElementRule() {
		return getContentElementAccess().getRule();
	}
	
	//Argument:
	//	Argument_Impl | Image | Widget | Text | Video | SimpleArgument_Impl | Tab | Animation | DragAndDrop |
	//	CompositeArgument_Impl;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//SimpleArgument SimpleElement:
	//	SimpleArgument_Impl | Image | Text | Video;
	public SimpleArgumentElements getSimpleArgumentAccess() {
		return pSimpleArgument;
	}
	
	public ParserRule getSimpleArgumentRule() {
		return getSimpleArgumentAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//TemplateDef:
	//	{TemplateDef}
	//	'TemplateDef'
	//	name=EString
	//	'{' (rows+=Row ("," rows+=Row)*)?
	//	'}';
	public TemplateDefElements getTemplateDefAccess() {
		return pTemplateDef;
	}
	
	public ParserRule getTemplateDefRule() {
		return getTemplateDefAccess().getRule();
	}
	
	//Unit:
	//	'Unit'
	//	name=EString
	//	author=EString
	//	'{'
	//	sections+=Section ("," sections+=Section)*
	//	'}';
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//Type_Impl Type:
	//	{Type}
	//	'Type'
	//	name=EString;
	public Type_ImplElements getType_ImplAccess() {
		return pType_Impl;
	}
	
	public ParserRule getType_ImplRule() {
		return getType_ImplAccess().getRule();
	}
	
	//Row:
	//	{Row}
	//	'row'
	//	'{' (columns+=Column ("," columns+=Column)*)? ('usetemplate' usetemplate=UseTemplate)?
	//	'}';
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//Column:
	//	{Column}
	//	'column'
	//	'{' ('width' width=EString)? (elements+=ContentElement ("," elements+=ContentElement)*)?
	//	'}';
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//UseTemplate:
	//	{UseTemplate} typetemplate=[TemplateDef|EString]? ('{' arguments+=Argument ("," arguments+=Argument)*)? '}';
	public UseTemplateElements getUseTemplateAccess() {
		return pUseTemplate;
	}
	
	public ParserRule getUseTemplateRule() {
		return getUseTemplateAccess().getRule();
	}
	
	//ContentElement_Impl ContentElement:
	//	{ContentElement}
	//	'ContentElement';
	public ContentElement_ImplElements getContentElement_ImplAccess() {
		return pContentElement_Impl;
	}
	
	public ParserRule getContentElement_ImplRule() {
		return getContentElement_ImplAccess().getRule();
	}
	
	//Image:
	//	{Image}
	//	'Image'
	//	'{' ('url' url=EString)?
	//	'}';
	public ImageElements getImageAccess() {
		return pImage;
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}
	
	//Widget:
	//	'Widget'
	//	name=EString
	//	'type' widgettype=[WidgetType|EString] ('{' widgetarguments+=Argument ("," widgetarguments+=Argument)*)? '}';
	public WidgetElements getWidgetAccess() {
		return pWidget;
	}
	
	public ParserRule getWidgetRule() {
		return getWidgetAccess().getRule();
	}
	
	//Text:
	//	'Text'
	//	'{'
	//	paragraphs+=Paragraph ("," paragraphs+=Paragraph)*
	//	'}';
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//Composite_Impl Composite:
	//	{Composite}
	//	'Composite';
	public Composite_ImplElements getComposite_ImplAccess() {
		return pComposite_Impl;
	}
	
	public ParserRule getComposite_ImplRule() {
		return getComposite_ImplAccess().getRule();
	}
	
	//Video:
	//	{Video}
	//	'Video'
	//	'{' ('url' url=EString)?
	//	'}';
	public VideoElements getVideoAccess() {
		return pVideo;
	}
	
	public ParserRule getVideoRule() {
		return getVideoAccess().getRule();
	}
	
	//SimpleArgument_Impl SimpleElement:
	//	{SimpleElement}
	//	'SimpleArgument';
	public SimpleArgument_ImplElements getSimpleArgument_ImplAccess() {
		return pSimpleArgument_Impl;
	}
	
	public ParserRule getSimpleArgument_ImplRule() {
		return getSimpleArgument_ImplAccess().getRule();
	}
	
	//Parameter_Impl Parameter:
	//	{Parameter}
	//	'Parameter';
	public Parameter_ImplElements getParameter_ImplAccess() {
		return pParameter_Impl;
	}
	
	public ParserRule getParameter_ImplRule() {
		return getParameter_ImplAccess().getRule();
	}
	
	//Fixed:
	//	{Fixed}
	//	'Param'
	//	type=[Type|EString]?;
	public FixedElements getFixedAccess() {
		return pFixed;
	}
	
	public ParserRule getFixedRule() {
		return getFixedAccess().getRule();
	}
	
	//Variable:
	//	{Variable}
	//	'VarParam'
	//	type=[Type|EString]?;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Argument_Impl Argument:
	//	{Argument}
	//	'Argument';
	public Argument_ImplElements getArgument_ImplAccess() {
		return pArgument_Impl;
	}
	
	public ParserRule getArgument_ImplRule() {
		return getArgument_ImplAccess().getRule();
	}
	
	//Tab:
	//	{Tab}
	//	'Tab'
	//	'{' (arguments+=SimpleArgument ("," arguments+=SimpleArgument)*)?
	//	'}';
	public TabElements getTabAccess() {
		return pTab;
	}
	
	public ParserRule getTabRule() {
		return getTabAccess().getRule();
	}
	
	//Animation:
	//	{Animation}
	//	'Animation'
	//	'{' ('width' width=EString)? ('image' image=EString)? (arguments+=SimpleArgument ("," arguments+=SimpleArgument)*)?
	//	'}';
	public AnimationElements getAnimationAccess() {
		return pAnimation;
	}
	
	public ParserRule getAnimationRule() {
		return getAnimationAccess().getRule();
	}
	
	//DragAndDrop:
	//	{DragAndDrop}
	//	'DragAndDrop'
	//	'{' (arguments+=SimpleArgument ("," arguments+=SimpleArgument)*)?
	//	'}';
	public DragAndDropElements getDragAndDropAccess() {
		return pDragAndDrop;
	}
	
	public ParserRule getDragAndDropRule() {
		return getDragAndDropAccess().getRule();
	}
	
	//CompositeArgument_Impl CompositeArgument:
	//	{CompositeArgument}
	//	'CompositeArgument'
	//	'{' ('arguments' '{' arguments+=SimpleArgument ("," arguments+=SimpleArgument)* '}')?
	//	'}';
	public CompositeArgument_ImplElements getCompositeArgument_ImplAccess() {
		return pCompositeArgument_Impl;
	}
	
	public ParserRule getCompositeArgument_ImplRule() {
		return getCompositeArgument_ImplAccess().getRule();
	}
	
	//Paragraph:
	//	{Paragraph} ('p' text=EString)?;
	public ParagraphElements getParagraphAccess() {
		return pParagraph;
	}
	
	public ParserRule getParagraphRule() {
		return getParagraphAccess().getRule();
	}
	
	//enum TypeSimpleElement:
	//	Text | Image | Video | Undefined;
	public TypeSimpleElementElements getTypeSimpleElementAccess() {
		return eTypeSimpleElement;
	}
	
	public EnumRule getTypeSimpleElementRule() {
		return getTypeSimpleElementAccess().getRule();
	}
	
	//SimpleType:
	//	{SimpleType} name=EString
	//	type=TypeSimpleElement?;
	public SimpleTypeElements getSimpleTypeAccess() {
		return pSimpleType;
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}
	
	//AggregatedType:
	//	{AggregatedType} name=EString
	//	'{' (type+=SimpleType ("," type+=SimpleType)*)?
	//	'}';
	public AggregatedTypeElements getAggregatedTypeAccess() {
		return pAggregatedType;
	}
	
	public ParserRule getAggregatedTypeRule() {
		return getAggregatedTypeAccess().getRule();
	}
	
	//WidgetType:
	//	{WidgetType}
	//	'widget'
	//	name=EString
	//	'{' (parameters+=Parameter ("," parameters+=Parameter)*)?
	//	'}';
	public WidgetTypeElements getWidgetTypeAccess() {
		return pWidgetType;
	}
	
	public ParserRule getWidgetTypeRule() {
		return getWidgetTypeAccess().getRule();
	}
	
	//ListType:
	//	{ListType}
	//	'List'
	//	name=EString
	//	listtype=[SimpleType|EString]?;
	public ListTypeElements getListTypeAccess() {
		return pListType;
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}
	
	//Section:
	//	{Section}
	//	'Section'
	//	name=EString
	//	'{' ('image' image=EString)? ('title' title=EString)? (rows+=Row ("," rows+=Row)*)?
	//	'}';
	public SectionElements getSectionAccess() {
		return pSection;
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
