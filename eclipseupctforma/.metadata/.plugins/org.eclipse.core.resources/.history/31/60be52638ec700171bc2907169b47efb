// automatically generated by Xtext
grammar org.xtext.Upctformagami with org.eclipse.xtext.common.Terminals

import "http://cpcd.upct.es/upctforma" as upctforma
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://cpcd.upct.es/upctformaevalua" 
import "http://cpcd.upct.es/upctformagami" as upctformagami

Gamification returns upctformagami::Gamification:
	{upctformagami::Gamification}
	'Gamification'
	'{'
		('imports' '{' imports+=Import ( "," imports+=Import)* '}' )?
		('widgets' '{' widgets+=WidgetDefPoint ( "," widgets+=WidgetDefPoint)* '}' )?
		('badges' '{' badges+=Badge ( "," badges+=Badge)* '}' )?
		('units' '{' units+=UnitPoint ( "," units+=UnitPoint)* '}' )?
	'}';










EvaluationUnit returns EvaluationUnit:
	EvaluationUnit_Impl | Training | Final;

Parameter returns upctforma::Parameter:
	Parameter_Impl | Fixed | Variable | WidgetType;







ColumnElement returns upctforma::ColumnElement:
	ColumnElement_Impl | Column | Image | Widget | Text | Composite_Impl | Video | Simple_Impl | Parameter_Impl | Row | Fixed | Variable | WidgetType;


Argument returns upctforma::Argument:
	Argument_Impl | Image | Widget | Text | Video | Simple_Impl | Tab | Animation | DragAndDrop | CompositeArgument_Impl;


Simple returns upctforma::Simple:
	Simple_Impl | Image | Text | Video;

Question returns Question:
	Question_Impl | UniqueAnswer | MultipleAnswer | FillingAnswer | TrueOrFalse;






Import returns upctformagami::Import:
	{upctformagami::Import}
	'Import'
	'{'
		('importedNamespace' importedNamespace=EString)?
	'}';

WidgetDefPoint returns upctformagami::WidgetDefPoint:
	{upctformagami::WidgetDefPoint}
	'WidgetDefPoint'
	'{'
		('widgetref' '(' widgetref+=[upctforma::WidgetDef|EString] ( "," widgetref+=[upctforma::WidgetDef|EString])* ')' )?
		('unitref' '(' unitref+=[upctforma::Unit|EString] ( "," unitref+=[upctforma::Unit|EString])* ')' )?
		('pointswidgetdef' '{' pointswidgetdef+=Point ( "," pointswidgetdef+=Point)* '}' )?
	'}';

Badge returns upctformagami::Badge:
	{upctformagami::Badge}
	'Badge'
	name=EString
	'{'
		('description' description=EString)?
		('url' url=EString)?
	'}';

UnitPoint returns upctformagami::UnitPoint:
	{upctformagami::UnitPoint}
	'UnitPoint'
	'{'
		('unitref' '(' unitref+=[upctforma::Unit|EString] ( "," unitref+=[upctforma::Unit|EString])* ')' )?
		('evaluaref' '(' evaluaref+=[EvaluationUnit|EString] ( "," evaluaref+=[EvaluationUnit|EString])* ')' )?
		('defbadges' '{' defbadges+=BadgeUnit ( "," defbadges+=BadgeUnit)* '}' )?
		('missions' '{' missions+=Mission ( "," missions+=Mission)* '}' )?
		('pointsunit' '{' pointsunit+=Point ( "," pointsunit+=Point)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

Point returns upctformagami::Point:
	{upctformagami::Point}
	'Point'
	'{'
		('type' type=TypeRule)?
		('points' points=EInt)?
		('attempt' attempt=EInt)?
		('score' score=EDouble)?
	'}';

WidgetDef returns upctforma::WidgetDef:
	{upctforma::WidgetDef}
	'WidgetDef'
	name=EString
	'{'
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Unit returns upctforma::Unit:
	'Unit'
	name=EString
	'{'
		('author' author=EString)?
		'sections' '{' sections+=Section ( "," sections+=Section)* '}' 
	'}';

enum TypeRule returns upctformagami::TypeRule:
				completed = 'completed' | loginDaily = 'loginDaily' | score = 'score';

EInt returns ecore::EInt:
	'-'? INT;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

Parameter_Impl returns upctforma::Parameter:
	{upctforma::Parameter}
	'Parameter'
	;

Fixed returns upctforma::Fixed:
	{upctforma::Fixed}
	'Fixed'
	'{'
		('type' type=TypeSimpleElement)?
	'}';

Variable returns upctforma::Variable:
	{upctforma::Variable}
	'Variable'
	'{'
		('type' type=[upctforma::DataType|EString])?
	'}';

WidgetType returns upctforma::WidgetType:
	{upctforma::WidgetType}
	'WidgetType'
	'{'
		('widgettype' widgettype=[upctforma::WidgetDef|EString])?
	'}';

enum TypeSimpleElement returns upctforma::TypeSimpleElement:
				Text = 'Text' | Image = 'Image' | Video = 'Video' | Undefined = 'Undefined';

DataType returns upctforma::DataType:
	{upctforma::DataType}
	'DataType'
	name=EString
	'{'
		('type' '{' type+=SimpleType ( "," type+=SimpleType)* '}' )?
	'}';

SimpleType returns upctforma::SimpleType:
	{upctforma::SimpleType}
	'SimpleType'
	name=EString
	'{'
		('type' type=TypeSimpleElement)?
	'}';

Section returns upctforma::Section:
	{upctforma::Section}
	'Section'
	name=EString
	'{'
		('image' image=EString)?
		('title' title=EString)?
		('rows' '{' rows+=Row ( "," rows+=Row)* '}' )?
	'}';

Row returns upctforma::Row:
	{upctforma::Row}
	'Row'
	'{'
		('columns' '{' columns+=Column ( "," columns+=Column)* '}' )?
		('usetemplate' usetemplate=UseTemplate)?
	'}';

Column returns upctforma::Column:
	{upctforma::Column}
	'Column'
	'{'
		('width' width=EString)?
		('elements' '{' elements+=ColumnElement ( "," elements+=ColumnElement)* '}' )?
	'}';

UseTemplate returns upctforma::UseTemplate:
	{upctforma::UseTemplate}
	'UseTemplate'
	'{'
		('typetemplate' typetemplate=[upctforma::TemplateDef|EString])?
		('arguments' '{' arguments+=Argument ( "," arguments+=Argument)* '}' )?
	'}';

ColumnElement_Impl returns upctforma::ColumnElement:
	{upctforma::ColumnElement}
	'ColumnElement'
	;

Image returns upctforma::Image:
	{upctforma::Image}
	'Image'
	'{'
		('url' url=EString)?
	'}';

Widget returns upctforma::Widget:
	'Widget'
	name=EString
	'{'
		'typewidget' typewidget=[upctforma::WidgetDef|EString]
		('widgetarguments' '{' widgetarguments+=Argument ( "," widgetarguments+=Argument)* '}' )?
	'}';

Text returns upctforma::Text:
	'Text'
	'{'
		'paragraphs' '{' paragraphs+=Paragraph ( "," paragraphs+=Paragraph)* '}' 
	'}';

Composite_Impl returns upctforma::Composite:
	{upctforma::Composite}
	'Composite'
	;

Video returns upctforma::Video:
	{upctforma::Video}
	'Video'
	'{'
		('url' url=EString)?
	'}';

Simple_Impl returns upctforma::Simple:
	{upctforma::Simple}
	'Simple'
	;

Argument_Impl returns upctforma::Argument:
	{upctforma::Argument}
	'Argument'
	;

Tab returns upctforma::Tab:
	{upctforma::Tab}
	'Tab'
	'{'
		('arguments' '{' arguments+=Simple ( "," arguments+=Simple)* '}' )?
	'}';

Animation returns upctforma::Animation:
	{upctforma::Animation}
	'Animation'
	'{'
		('width' width=EString)?
		('image' image=EString)?
		('arguments' '{' arguments+=Simple ( "," arguments+=Simple)* '}' )?
	'}';

DragAndDrop returns upctforma::DragAndDrop:
	{upctforma::DragAndDrop}
	'DragAndDrop'
	'{'
		('arguments' '{' arguments+=Simple ( "," arguments+=Simple)* '}' )?
	'}';

CompositeArgument_Impl returns upctforma::CompositeArgument:
	{upctforma::CompositeArgument}
	'CompositeArgument'
	'{'
		('arguments' '{' arguments+=Simple ( "," arguments+=Simple)* '}' )?
	'}';

Paragraph returns upctforma::Paragraph:
	{upctforma::Paragraph}
	'Paragraph'
	'{'
		('text' text=EString)?
	'}';

TemplateDef returns upctforma::TemplateDef:
	{upctforma::TemplateDef}
	'TemplateDef'
	name=EString
	'{'
		('rows' '{' rows+=Row ( "," rows+=Row)* '}' )?
	'}';

BadgeUnit returns upctformagami::BadgeUnit:
	{upctformagami::BadgeUnit}
	'BadgeUnit'
	'{'
		('type' type=TypeRule)?
		('badge' badge=[upctformagami::Badge|EString])?
	'}';

Mission returns upctformagami::Mission:
	{upctformagami::Mission}
	'Mission'
	'{'
		('type' type=TypeMissions)?
		('score' score=EDouble)?
		('nextunit' nextunit=[upctforma::Unit|EString])?
	'}';

EvaluationUnit_Impl returns EvaluationUnit:
	{EvaluationUnit}
	'EvaluationUnit'
	name=EString
	'{'
		('numberquestions' numberquestions=EInt)?
		('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	'}';

enum TypeMissions returns upctformagami::TypeMissions:
				strong = 'strong' | weak = 'weak' | inhibitor = 'inhibitor';

Question_Impl returns Question:
	{Question}
	'Question'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
	'}';

Training returns Training:
	{Training}
	'Training'
	name=EString
	'{'
		('numberquestions' numberquestions=EInt)?
		('Attempts' Attempts=EInt)?
		('grade' grade=TypeGrade)?
		('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	'}';

Final returns Final:
	{Final}
	'Final'
	name=EString
	'{'
		('numberquestions' numberquestions=EInt)?
		('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	'}';

UniqueAnswer returns UniqueAnswer:
	'UniqueAnswer'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
		('correctanswer' correctanswer=EInt)?
		'statements' statements=Paragraph0
		('answers' '{' answers+=Unique ( "," answers+=Unique)* '}' )?
	'}';

MultipleAnswer returns MultipleAnswer:
	'MultipleAnswer'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
		'statements' statements=Paragraph0
		('answers' '{' answers+=Multiple ( "," answers+=Multiple)* '}' )?
	'}';

FillingAnswer returns FillingAnswer:
	{FillingAnswer}
	'FillingAnswer'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
		('holes' '{' holes+=Hole ( "," holes+=Hole)* '}' )?
	'}';

TrueOrFalse returns TrueOrFalse:
	{TrueOrFalse}
	'TrueOrFalse'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
		('assertions' '{' assertions+=Assertion ( "," assertions+=Assertion)* '}' )?
	'}';

Paragraph0 returns Paragraph:
	{Paragraph}
	'Paragraph'
	'{'
		('text' text=EString)?
	'}';

Unique returns Unique:
	{Unique}
	'Unique'
	'{'
		('text' text=EString)?
	'}';

Multiple returns Multiple:
	{Multiple}
	(value?='value')?
	'Multiple'
	'{'
		('text' text=EString)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Hole returns Hole:
	{Hole}
	'Hole'
	'{'
		('text' text=EString)?
		('type' type=TypeHole)?
	'}';

enum TypeHole returns TypeHole:
				visible = 'visible' | hole = 'hole';

Assertion returns Assertion:
	{Assertion}
	(value?='value')?
	'Assertion'
	'{'
		('text' text=EString)?
	'}';

enum TypeGrade returns TypeGrade:
				highest = 'highest' | middle = 'middle' | lowest = 'lowest';
