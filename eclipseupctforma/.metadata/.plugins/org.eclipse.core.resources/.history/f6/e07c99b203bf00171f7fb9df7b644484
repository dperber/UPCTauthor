// automatically generated by Xtext
grammar org.xtext.Upctforma with org.eclipse.xtext.common.Terminals


import "platform:/resource/upctforma/model/upctforma.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Definition returns Definition:
	{Definition}
	'Definition'
	name=EString
	'{'
		('package' name = QualifiedName ';')?
		(imports+=Import ( "," imports+=Import)* )?
		('types' '{' types+=Type ( "," types+=Type)* '}' )?
		('widgets' '{' widgets+=WidgetDef ( "," widgets+=WidgetDef)* '}' )?
		('templates' '{' templates+=TemplateDef ( "," templates+=TemplateDef)* '}' )?
		(unit=Unit )?
	'}';

QualifiedName: ID ('.' ID)* ;

Import:
	'import' importedNamespace=QualifiedNameWithWildcard ';' ;

QualifiedNameWithWildcard: QualifiedName '.*'? ;

Type returns Type:
	Type_Impl | SimpleType | DataType;


Parameter returns Parameter:
	Parameter_Impl | Fixed | Variable | WidgetType;


ColumnElement returns ColumnElement:
	ColumnElement_Impl | Column | Image | Widget | Text | Composite_Impl | Video | Simple_Impl | Parameter_Impl | Row | Fixed | Variable | WidgetType;

Argument returns Argument:
	Argument_Impl | Image | Widget | Text | Video | Simple_Impl | Tab | Animation | DragAndDrop | CompositeArgument_Impl;

Simple returns Simple:
	Simple_Impl | Image | Text | Video;

EString returns ecore::EString:
	STRING | ID;

TemplateDef returns TemplateDef:
	{TemplateDef}
	'TemplateDef'
	name=EString
	'{'
		(rows+=Row ( "," rows+=Row)* )?
	'}';

WidgetDef returns WidgetDef:
	{WidgetDef}
	name=EString
	'{'
		(parameters+=Parameter ( "," parameters+=Parameter)* )?
	'}';

Unit returns Unit:
	'Unit'
	name=EString
	author=EString
	'{'
		sections+=Section ( "," sections+=Section)*
	'}';

Type_Impl returns Type:
	{Type}
	'Type'
	name=EString;

Row returns Row:
	{Row}
	'row'
	'{'
		(columns+=Column ( "," columns+=Column)* )?
		('usetemplate' usetemplate=UseTemplate)?
	'}';

Column returns Column:
	{Column}
	'column'
	'{'
		('width' width=EString)?
		(elements+=ColumnElement ( "," elements+=ColumnElement)* )?
	'}';

UseTemplate returns UseTemplate:
	{UseTemplate}
	(typetemplate=[TemplateDef|EString])?
	('{' arguments+=Argument ( "," arguments+=Argument)* )? '}'
	;

ColumnElement_Impl returns ColumnElement:
	{ColumnElement}
	'ColumnElement'
	;

Image returns Image:
	{Image}
	'Image'
	'{'
		('url' url=EString)?
	'}';

Widget returns Widget:
	'Widget'
	name=EString
		'type' typewidget=[WidgetDef|EString]
		('{' widgetarguments+=Argument ( "," widgetarguments+=Argument)* )? '}'
	;

Text returns Text:
	'Text'
	'{'
		paragraphs+=Paragraph ( "," paragraphs+=Paragraph)* 
	'}';

Composite_Impl returns Composite:
	{Composite}
	'Composite'
	;

Video returns Video:
	{Video}
	'Video'
	'{'
		('url' url=EString)?
	'}';

Simple_Impl returns Simple:
	{Simple}
	'Simple'
	;

Parameter_Impl returns Parameter:
	{Parameter}
	'Parameter'
	;

Fixed returns Fixed:
	{Fixed}
	'Param'
	(type=TypeSimpleElement)?
	;

Variable returns Variable:
	{Variable}
	'VarParam'
	(type=[DataType|EString])?
	;

WidgetType returns WidgetType:
	{WidgetType}
	'WidgetType'
	(widgettype=[WidgetDef|EString])?
	;

Argument_Impl returns Argument:
	{Argument}
	'Argument'
	;

Tab returns Tab:
	{Tab}
	'Tab'
	'{'
		(arguments+=Simple ( "," arguments+=Simple)* )?
	'}';

Animation returns Animation:
	{Animation}
	'Animation'
	'{'
		('width' width=EString)?
		('image' image=EString)?
		(arguments+=Simple ( "," arguments+=Simple)* )?
	'}';

DragAndDrop returns DragAndDrop:
	{DragAndDrop}
	'DragAndDrop'
	'{'
		(arguments+=Simple ( "," arguments+=Simple)* )?
	'}';

CompositeArgument_Impl returns CompositeArgument:
	{CompositeArgument}
	'CompositeArgument'
	'{'
		('arguments' '{' arguments+=Simple ( "," arguments+=Simple)* '}' )?
	'}';

Paragraph returns Paragraph:
	{Paragraph}
	('p' text=EString)?
	;

enum TypeSimpleElement returns TypeSimpleElement:
				Text = 'Text' | Image = 'Image' | Video = 'Video' | Undefined = 'Undefined';

DataType returns DataType:
	{DataType}
	name=EString
	'{'
		(type+=SimpleType ( "," type+=SimpleType)* )?
	'}';

SimpleType returns SimpleType:
	{SimpleType}
	name=EString
	('type' type=TypeSimpleElement)?
	;

Section returns Section:
	{Section}
	'Section'
	name=EString
	'{'
		('image' image=EString)?
		('title' title=EString)?
		(rows+=Row ( "," rows+=Row)* )?
	'}';
