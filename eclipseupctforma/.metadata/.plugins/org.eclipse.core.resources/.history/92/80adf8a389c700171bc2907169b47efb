// automatically generated by Xtext
grammar org.xtext.Upctformagami with org.eclipse.xtext.common.Terminals

import "platform:/resource/upctforma/model/upctforma.ecore" as upctforma
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/upctformagami/model/upctformagami.ecore"

Gamification returns Gamification:
	{Gamification}
	'Gamification'
	'{'
		('import' imports+=Import ( "," imports+=Import)* ';' )?
		('badges' '{' badges+=Badge ( "," badges+=Badge)* '}' )?
		(widgets+=WidgetDefPoint ( "," widgets+=WidgetDefPoint)* )?
		(units+=UnitPoint ( "," units+=UnitPoint)* )?
	'}';

QualifiedName: ID ('.' ID)* ;

Import returns Import:
	{Import}
	
	importedNamespace=QualifiedNameWithWildcard  ;

QualifiedNameWithWildcard: QualifiedName '.*'? ;

Parameter returns upctforma::Parameter:
	Parameter_Impl | Fixed | Variable | WidgetType;

ColumnElement returns upctforma::ColumnElement:
	ColumnElement_Impl | Column | Image | Widget | Text | Composite_Impl | Video | Simple_Impl | Parameter_Impl | Row | Fixed | Variable | WidgetType;


Argument returns upctforma::Argument:
	Argument_Impl | Image | Widget | Text | Video | Simple_Impl | Tab | Animation | DragAndDrop | CompositeArgument_Impl;


Simple returns upctforma::Simple:
	Simple_Impl | Image | Text | Video;


WidgetDefPoint returns WidgetDefPoint:
	{WidgetDefPoint}
	'WidgetDefPoint'
	'{'
		('widget' widgetref+=[upctforma::WidgetDef|EString] ( "," widgetref+=[upctforma::WidgetDef|EString])* )?
		('unit' unitref+=[upctforma::Unit|EString] ( "," unitref+=[upctforma::Unit|EString])* )	?
		(pointswidgetdef+=Point ( "," pointswidgetdef+=Point)* )?
		
	'}';

Badge returns Badge:
	{Badge}
	'Badge'
	name=EString
	'{'
		('description' description=EString)?
		('url' url=EString)?
	'}';

UnitPoint returns UnitPoint:
	{UnitPoint}
	'UnitPoint'
	'{'
		('unit' unitref+=[upctforma::Unit|EString] ( "," unitref+=[upctforma::Unit|EString])* )	?
		(defbadges+=BadgeUnit ( "," defbadges+=BadgeUnit)* )?
		(pointsunit+=Point ( "," pointsunit+=Point)* )?
		('missions' '{' missions+=Missions ( "," missions+=Missions)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

Point returns Point:
	{Point}
	'Point'
	'{'
		('type' type=TypeRule)?
		('points' points=EInt)?
		('attempt' attempt=EInt)?
	'}';

WidgetDef returns upctforma::WidgetDef:
	{upctforma::WidgetDef}
	'WidgetDef'
	name=EString
	'{'
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

enum TypeRule returns TypeRule:
				completed = 'completed' | loginDaily = 'loginDaily';

EInt returns ecore::EInt:
	'-'? INT;

Parameter_Impl returns upctforma::Parameter:
	{upctforma::Parameter}
	'Parameter'
	;

Fixed returns upctforma::Fixed:
	{upctforma::Fixed}
	'Fixed'
	'{'
		('type' type=TypeSimpleElement)?
	'}';

Variable returns upctforma::Variable:
	{upctforma::Variable}
	'Variable'
	'{'
		('type' type=[upctforma::DataType|EString])?
	'}';

WidgetType returns upctforma::WidgetType:
	{upctforma::WidgetType}
	'WidgetType'
	'{'
		('widgettype' widgettype=[upctforma::WidgetDef|EString])?
	'}';

enum TypeSimpleElement returns upctforma::TypeSimpleElement:
				Text = 'Text' | Image = 'Image' | Video = 'Video' | Undefined = 'Undefined';

DataType returns upctforma::DataType:
	{upctforma::DataType}
	'DataType'
	name=EString
	'{'
		('type' '{' type+=SimpleType ( "," type+=SimpleType)* '}' )?
	'}';

SimpleType returns upctforma::SimpleType:
	{upctforma::SimpleType}
	'SimpleType'
	name=EString
	'{'
		('type' type=TypeSimpleElement)?
	'}';

Unit returns upctforma::Unit:
	'Unit'
	name=EString
	'{'
		('author' author=EString)?
		'sections' '{' sections+=Section ( "," sections+=Section)* '}' 
	'}';

BadgeUnit returns BadgeUnit:
	{BadgeUnit}
	'BadgeUnit'
	'{'
		('type' type=TypeRule)?
		('badge' badge=[Badge|EString])?
	'}';

Missions returns Missions:
	{Missions}
	'Missions'
	'{'
		('type' type=TypeMissions)?
		('nextunit' nextunit=[upctforma::Unit|EString])?
	'}';

Section returns upctforma::Section:
	{upctforma::Section}
	'Section'
	name=EString
	'{'
		('image' image=EString)?
		('title' title=EString)?
		('rows' '{' rows+=Row ( "," rows+=Row)* '}' )?
	'}';

Row returns upctforma::Row:
	{upctforma::Row}
	'Row'
	'{'
		('columns' '{' columns+=Column ( "," columns+=Column)* '}' )?
		('usetemplate' usetemplate=UseTemplate)?
	'}';

Column returns upctforma::Column:
	{upctforma::Column}
	'Column'
	'{'
		('width' width=EString)?
		('elements' '{' elements+=ColumnElement ( "," elements+=ColumnElement)* '}' )?
	'}';

UseTemplate returns upctforma::UseTemplate:
	{upctforma::UseTemplate}
	'UseTemplate'
	'{'
		('typetemplate' typetemplate=[upctforma::TemplateDef|EString])?
		('arguments' '{' arguments+=Argument ( "," arguments+=Argument)* '}' )?
	'}';

ColumnElement_Impl returns upctforma::ColumnElement:
	{upctforma::ColumnElement}
	'ColumnElement'
	;

Image returns upctforma::Image:
	{upctforma::Image}
	'Image'
	'{'
		('url' url=EString)?
	'}';

Widget returns upctforma::Widget:
	'Widget'
	name=EString
	'{'
		'typewidget' typewidget=[upctforma::WidgetDef|EString]
		('widgetarguments' '{' widgetarguments+=Argument ( "," widgetarguments+=Argument)* '}' )?
	'}';

Text returns upctforma::Text:
	'Text'
	'{'
		'paragraphs' '{' paragraphs+=Paragraph ( "," paragraphs+=Paragraph)* '}' 
	'}';

Composite_Impl returns upctforma::Composite:
	{upctforma::Composite}
	'Composite'
	;

Video returns upctforma::Video:
	{upctforma::Video}
	'Video'
	'{'
		('url' url=EString)?
	'}';

Simple_Impl returns upctforma::Simple:
	{upctforma::Simple}
	'Simple'
	;

Argument_Impl returns upctforma::Argument:
	{upctforma::Argument}
	'Argument'
	;

Tab returns upctforma::Tab:
	{upctforma::Tab}
	'Tab'
	'{'
		('arguments' '{' arguments+=Simple ( "," arguments+=Simple)* '}' )?
	'}';

Animation returns upctforma::Animation:
	{upctforma::Animation}
	'Animation'
	'{'
		('width' width=EString)?
		('image' image=EString)?
		('arguments' '{' arguments+=Simple ( "," arguments+=Simple)* '}' )?
	'}';

DragAndDrop returns upctforma::DragAndDrop:
	{upctforma::DragAndDrop}
	'DragAndDrop'
	'{'
		('arguments' '{' arguments+=Simple ( "," arguments+=Simple)* '}' )?
	'}';

CompositeArgument_Impl returns upctforma::CompositeArgument:
	{upctforma::CompositeArgument}
	'CompositeArgument'
	'{'
		('arguments' '{' arguments+=Simple ( "," arguments+=Simple)* '}' )?
	'}';

Paragraph returns upctforma::Paragraph:
	{upctforma::Paragraph}
	'Paragraph'
	'{'
		('text' text=EString)?
	'}';

TemplateDef returns upctforma::TemplateDef:
	{upctforma::TemplateDef}
	'TemplateDef'
	name=EString
	'{'
		('rows' '{' rows+=Row ( "," rows+=Row)* '}' )?
	'}';

enum TypeMissions returns TypeMissions:
				strong = 'strong' | weak = 'weak' | inhibitor = 'inhibitor';
