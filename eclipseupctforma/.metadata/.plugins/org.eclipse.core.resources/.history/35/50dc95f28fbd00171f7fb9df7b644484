// automatically generated by Xtext
grammar org.xtext.UpctformaGamification with org.eclipse.xtext.common.Terminals

import "platform:/resource/upctforma/model/upctforma.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/upctformagamification/model/upctformagamification.ecore"  as upctformagamification

Gamification returns upctformagamification::Gamification:
	{upctformagamification::Gamification}
	'Gamification'
	'{'
		(imports+=Import ( "," imports+=Import)* )?
		('badges' '{' badges+=Badge ( "," badges+=Badge)* '}' )?
		(units+=UnitGamification ( "," units+=UnitGamification)* )?
		(widgets+=WidgetGamification ( "," widgets+=WidgetGamification)* )?
	'}';

QualifiedName: ID ('.' ID)* ;

Import returns upctformagamification::Import:
	{upctformagamification::Import}
	
	'import' importedNamespace=QualifiedNameWithWildcard ';' ;

QualifiedNameWithWildcard: QualifiedName '.*'? ;


ColumnElement returns ColumnElement:
	ColumnElement_Impl | Column | Image | Widget | Text | Composite_Impl | Video | Simple_Impl | Parameter_Impl | Row | Fixed | Variable;


Argument returns Argument:
	Argument_Impl | Image | Text | Video | Simple_Impl | Tab | Animation | DragAndDrop | CompositeArgument_Impl;



Parameter returns Parameter:
	Parameter_Impl | Fixed | Variable;


Simple returns Simple:
	Simple_Impl | Image | Text | Video;

UnitGamification returns upctformagamification::UnitGamification:
	{upctformagamification::UnitGamification}
	'UnitGamification'
	'{'
		('unitref' unitref=[Unit|EString])?
		(pointsunit+=Point ( "," pointsunit+=Point)* )?
		(defbadges+=BadgeUnit ( "," defbadges+=BadgeUnit)* )?
	'}';

WidgetGamification returns upctformagamification::WidgetGamification:
	{upctformagamification::WidgetGamification}
	'WidgetGamification'
	'{'
		('widgetref' widgetref=[WidgetDef|EString])?
		(pointswidget+=Point ( "," pointswidget+=Point)* )?
	'}';

Badge returns upctformagamification::Badge:
	{upctformagamification::Badge}
	'Badge'
	name=EString
	'{'
		('description' description=EString)?
		('url' url=EString)?
	'}';

Unit returns Unit:
	'Unit'
	name=EString
	'{'
		('author' author=EString)?
		'sections' '{' sections+=Section ( "," sections+=Section)* '}' 
	'}';

Point returns upctformagamification::Point:
	{upctformagamification::Point}
	'Point'
	'{'
		('type' type=TypeRule)?
		('points' points=EInt)?
		('attempt' attempt=EInt)?
		('endingdate' endingdate=EDate)?
	'}';

BadgeUnit returns upctformagamification::BadgeUnit:
	{upctformagamification::BadgeUnit}
	'BadgeUnit'
	'{'
		('type' type=TypeRule)?
		('badge' badge=[upctformagamification::Badge|EString])?
	'}';

EString returns ecore::EString:
	STRING | ID;

Section returns Section:
	{Section}
	'Section'
	name=EString
	'{'
		('image' image=EString)?
		('title' title=EString)?
		('rows' '{' rows+=Row ( "," rows+=Row)* '}' )?
	'}';

Row returns Row:
	{Row}
	'Row'
	'{'
		('columns' '{' columns+=Column ( "," columns+=Column)* '}' )?
		('usetemplate' usetemplate=UseTemplate)?
	'}';

Column returns Column:
	{Column}
	'Column'
	'{'
		('width' width=EString)?
		('elements' '{' elements+=ColumnElement ( "," elements+=ColumnElement)* '}' )?
	'}';

UseTemplate returns UseTemplate:
	{UseTemplate}
	'UseTemplate'
	'{'
		('typetemplate' typetemplate=[TemplateDef|EString])?
		('arguments' '{' arguments+=Argument ( "," arguments+=Argument)* '}' )?
	'}';

ColumnElement_Impl returns ColumnElement:
	{ColumnElement}
	'ColumnElement'
	;

Image returns Image:
	{Image}
	'Image'
	'{'
		('url' url=EString)?
	'}';

Widget returns Widget:
	'Widget'
	'{'
		'typewidget' typewidget=[WidgetDef|EString]
	'}';

Text returns Text:
	'Text'
	'{'
		'paragraphs' '{' paragraphs+=Paragraph ( "," paragraphs+=Paragraph)* '}' 
	'}';

Composite_Impl returns Composite:
	{Composite}
	'Composite'
	;

Video returns Video:
	{Video}
	'Video'
	'{'
		('url' url=EString)?
	'}';

Simple_Impl returns Simple:
	{Simple}
	'Simple'
	;

Parameter_Impl returns Parameter:
	{Parameter}
	'Parameter'
	;

Fixed returns Fixed:
	{Fixed}
	'Fixed'
	'{'
		('type' type=TypeSimpleElement)?
	'}';

Variable returns Variable:
	{Variable}
	'Variable'
	'{'
		('type' type=[DataType|EString])?
	'}';

WidgetDef returns WidgetDef:
	{WidgetDef}
	'WidgetDef'
	name=EString
	'{'
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Paragraph returns Paragraph:
	{Paragraph}
	'Paragraph'
	'{'
		('text' text=EString)?
	'}';

enum TypeSimpleElement returns TypeSimpleElement:
				Text = 'Text' | Image = 'Image' | Video = 'Video' | Undefined = 'Undefined';

DataType returns DataType:
	{DataType}
	'DataType'
	name=EString
	'{'
		('type' '{' type+=SimpleType ( "," type+=SimpleType)* '}' )?
	'}';

SimpleType returns SimpleType:
	{SimpleType}
	'SimpleType'
	name=EString
	'{'
		('type' type=TypeSimpleElement)?
	'}';

TemplateDef returns TemplateDef:
	{TemplateDef}
	'TemplateDef'
	name=EString
	'{'
		('rows' '{' rows+=Row ( "," rows+=Row)* '}' )?
	'}';

Argument_Impl returns Argument:
	{Argument}
	'Argument'
	;

Tab returns Tab:
	{Tab}
	'Tab'
	'{'
		('arguments' '{' arguments+=Simple ( "," arguments+=Simple)* '}' )?
	'}';

Animation returns Animation:
	{Animation}
	'Animation'
	'{'
		('width' width=EString)?
		('image' image=EString)?
		('arguments' '{' arguments+=Simple ( "," arguments+=Simple)* '}' )?
	'}';

DragAndDrop returns DragAndDrop:
	{DragAndDrop}
	'DragAndDrop'
	'{'
		('arguments' '{' arguments+=Simple ( "," arguments+=Simple)* '}' )?
	'}';

CompositeArgument_Impl returns CompositeArgument:
	{CompositeArgument}
	'CompositeArgument'
	'{'
		('arguments' '{' arguments+=Simple ( "," arguments+=Simple)* '}' )?
	'}';

enum TypeRule returns upctformagamification::TypeRule:
				completed = 'completed' | loginDaily = 'loginDaily';

EInt returns ecore::EInt:
	'-'? INT;

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;
