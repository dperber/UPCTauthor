// automatically generated by Xtext
grammar org.xtext.Upctformagami with org.eclipse.xtext.common.Terminals

import "http://cpcd.upct.es/upctformaevalua" as upctformaevalua
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://cpcd.upct.es/upctforma" 
import "http://cpcd.upct.es/upctformagami" as upctformagami

Gamification returns upctformagami::Gamification:
	{upctformagami::Gamification}
	'Gamification'
	'{'
		('imports' '{' imports+=Import ( "," imports+=Import)* '}' )?
		('widgets' '{' widgets+=WidgetGamify ( "," widgets+=WidgetGamify)* '}' )?
		('badges' '{' badges+=Badge ( "," badges+=Badge)* '}' )?
		('units' '{' units+=UnitGamify ( "," units+=UnitGamify)* '}' )?
	'}';










EvaluationUnit returns upctformaevalua::EvaluationUnit:
	EvaluationUnit_Impl | Training | Final;



Type returns Type:
	Type_Impl | SimpleType | RecordType | WidgetType | ListType | CompositeType_Impl;




ContentElement returns ContentElement:
	ContentElement_Impl | Column | Image | Widget | Text | Composite_Impl | Video | SimpleElement_Impl | PlaceHolder | Row | Game | RecordValue | ListValue;





Question returns upctformaevalua::Question:
	Question_Impl | UniqueAnswer | MultipleAnswer | FillingAnswer | TrueOrFalse;






Import returns upctformagami::Import:
	{upctformagami::Import}
	'Import'
	'{'
		('importedNamespace' importedNamespace=EString)?
	'}';

WidgetGamify returns upctformagami::WidgetGamify:
	{upctformagami::WidgetGamify}
	'WidgetGamify'
	'{'
		('unitref' '(' unitref+=[Unit|EString] ( "," unitref+=[Unit|EString])* ')' )?
		('widgetref' '(' widgetref+=[WidgetType|EString] ( "," widgetref+=[WidgetType|EString])* ')' )?
		('pointswidgetdef' '{' pointswidgetdef+=PointAchievement ( "," pointswidgetdef+=PointAchievement)* '}' )?
	'}';

Badge returns upctformagami::Badge:
	{upctformagami::Badge}
	'Badge'
	name=EString
	'{'
		('description' description=EString)?
		('url' url=EString)?
	'}';

UnitGamify returns upctformagami::UnitGamify:
	{upctformagami::UnitGamify}
	'UnitGamify'
	'{'
		('state' state=TypeState)?
		('URL' URL=EString)?
		('image' image=EString)?
		('unitref' unitref=[Unit|EString])?
		('evalref' evalref=[upctformaevalua::EvaluationUnit|EString])?
		('defbadges' '{' defbadges+=UnitBadge ( "," defbadges+=UnitBadge)* '}' )?
		('missions' '{' missions+=Mission ( "," missions+=Mission)* '}' )?
		('pointsunit' '{' pointsunit+=PointAchievement ( "," pointsunit+=PointAchievement)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

PointAchievement returns upctformagami::PointAchievement:
	{upctformagami::PointAchievement}
	'PointAchievement'
	'{'
		('type' type=TypeRule)?
		('points' points=EInt)?
		('attempt' attempt=EInt)?
		('pointrange' '{' pointrange+=ScoreRange ( "," pointrange+=ScoreRange)* '}' )?
	'}';

Unit returns Unit:
	'Unit'
	name=EString
	'{'
		('author' author=EString)?
		'sections' '{' sections+=Section ( "," sections+=Section)* '}' 
	'}';

WidgetType returns WidgetType:
	'WidgetType'
	name=EString
	'{'
		'widgettypeelements' '(' widgettypeelements+=[Type|EString] ( "," widgettypeelements+=[Type|EString])* ')' 
	'}';

enum TypeRule returns upctformagami::TypeRule:
				completed = 'completed' | loginDaily = 'loginDaily' | scores = 'scores';

EInt returns ecore::EInt:
	'-'? INT;

ScoreRange returns upctformagami::ScoreRange:
	{upctformagami::ScoreRange}
	'ScoreRange'
	'{'
		('InitialScore' InitialScore=EDouble)?
		('FinalScore' FinalScore=EDouble)?
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

Section returns Section:
	{Section}
	'Section'
	name=EString
	'{'
		('image' image=EString)?
		('title' title=EString)?
		('rows' '{' rows+=Row ( "," rows+=Row)* '}' )?
	'}';

Row returns Row:
	{Row}
	'Row'
	'{'
		('columns' '{' columns+=Column ( "," columns+=Column)* '}' )?
		('usetemplate' usetemplate=UseTemplate)?
	'}';

Column returns Column:
	{Column}
	'Column'
	'{'
		('width' width=EString)?
		('elements' '{' elements+=ContentElement ( "," elements+=ContentElement)* '}' )?
	'}';

UseTemplate returns UseTemplate:
	{UseTemplate}
	'UseTemplate'
	'{'
		('typetemplate' typetemplate=[TemplateDef|EString])?
		('templateelements' '{' templateelements+=ContentElement ( "," templateelements+=ContentElement)* '}' )?
	'}';

ContentElement_Impl returns ContentElement:
	{ContentElement}
	'ContentElement'
	;

Image returns Image:
	{Image}
	'Image'
	'{'
		('url' url=EString)?
	'}';

Widget returns Widget:
	'Widget'
	name=EString
	'{'
		'widgettype' widgettype=[WidgetType|EString]
		('widgetelements' '{' widgetelements+=ContentElement ( "," widgetelements+=ContentElement)* '}' )?
	'}';

Text returns Text:
	'Text'
	'{'
		'paragraphs' '{' paragraphs+=Paragraph ( "," paragraphs+=Paragraph)* '}' 
	'}';

Composite_Impl returns Composite:
	{Composite}
	'Composite'
	;

Video returns Video:
	{Video}
	'Video'
	'{'
		('id' id=EString)?
	'}';

SimpleElement_Impl returns SimpleElement:
	{SimpleElement}
	'SimpleElement'
	;

PlaceHolder returns PlaceHolder:
	'PlaceHolder'
	'{'
		'type' type=[Type|EString]
	'}';

Game returns Game:
	{Game}
	'Game'
	'{'
		('id' id=EString)?
	'}';

RecordValue returns RecordValue:
	'RecordValue'
	'{'
		'recordvalues' '{' recordvalues+=FieldValue ( "," recordvalues+=FieldValue)* '}' 
	'}';

ListValue returns ListValue:
	'ListValue'
	'{'
		'listvalues' '{' listvalues+=ContentElement ( "," listvalues+=ContentElement)* '}' 
	'}';

Paragraph returns Paragraph:
	{Paragraph}
	'Paragraph'
	'{'
		('text' text=EString)?
	'}';

Type_Impl returns Type:
	{Type}
	'Type'
	name=EString;

SimpleType returns SimpleType:
	{SimpleType}
	'SimpleType'
	name=EString;

RecordType returns RecordType:
	'RecordType'
	name=EString
	'{'
		'recordtype' '{' recordtype+=Field ( "," recordtype+=Field)* '}' 
	'}';

ListType returns ListType:
	'ListType'
	name=EString
	'{'
		'listtype' listtype=[Type|EString]
	'}';

CompositeType_Impl returns CompositeType:
	{CompositeType}
	'CompositeType'
	name=EString;

Field returns Field:
	'Field'
	name=EString
	'{'
		'fieldtype' fieldtype=[Type|EString]
	'}';

FieldValue returns FieldValue:
	'FieldValue'
	name=EString
	'{'
		'fieldvalue' fieldvalue=ContentElement
	'}';

TemplateDef returns TemplateDef:
	{TemplateDef}
	'TemplateDef'
	name=EString
	'{'
		('rows' '{' rows+=Row ( "," rows+=Row)* '}' )?
	'}';

UnitBadge returns upctformagami::UnitBadge:
	{upctformagami::UnitBadge}
	'UnitBadge'
	'{'
		('type' type=TypeRule)?
		('badge' badge=[upctformagami::Badge|EString])?
	'}';

Mission returns upctformagami::Mission:
	{upctformagami::Mission}
	'Mission'
	'{'
		('type' type=TypeMissions)?
		('nextunit' nextunit=[Unit|EString])?
		('nexteval' nexteval=[upctformaevalua::EvaluationUnit|EString])?
		('missionrange' '{' missionrange+=ScoreRange ( "," missionrange+=ScoreRange)* '}' )?
	'}';

enum TypeState returns upctformagami::TypeState:
				open = 'open' | close = 'close';

EvaluationUnit_Impl returns upctformaevalua::EvaluationUnit:
	{upctformaevalua::EvaluationUnit}
	'EvaluationUnit'
	name=EString
	'{'
		('numberquestions' numberquestions=EInt)?
		('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	'}';

enum TypeMissions returns upctformagami::TypeMissions:
				strong = 'strong' | weak = 'weak' | inhibitor = 'inhibitor' | scores = 'scores';

Question_Impl returns upctformaevalua::Question:
	{upctformaevalua::Question}
	'Question'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
	'}';

Training returns upctformaevalua::Training:
	{upctformaevalua::Training}
	'Training'
	name=EString
	'{'
		('numberquestions' numberquestions=EInt)?
		('Attempts' Attempts=EInt)?
		('grade' grade=TypeGrade)?
		('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	'}';

Final returns upctformaevalua::Final:
	{upctformaevalua::Final}
	'Final'
	name=EString
	'{'
		('numberquestions' numberquestions=EInt)?
		('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	'}';

UniqueAnswer returns upctformaevalua::UniqueAnswer:
	'UniqueAnswer'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
		('correctanswer' correctanswer=EInt)?
		'statements' statements=Paragraph0
		('answers' '{' answers+=Unique ( "," answers+=Unique)* '}' )?
	'}';

MultipleAnswer returns upctformaevalua::MultipleAnswer:
	'MultipleAnswer'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
		'statements' statements=Paragraph0
		('answers' '{' answers+=Multiple ( "," answers+=Multiple)* '}' )?
	'}';

FillingAnswer returns upctformaevalua::FillingAnswer:
	{upctformaevalua::FillingAnswer}
	'FillingAnswer'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
		('holes' '{' holes+=Hole ( "," holes+=Hole)* '}' )?
	'}';

TrueOrFalse returns upctformaevalua::TrueOrFalse:
	{upctformaevalua::TrueOrFalse}
	'TrueOrFalse'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
		('assertions' '{' assertions+=Assertion ( "," assertions+=Assertion)* '}' )?
	'}';

Paragraph0 returns upctformaevalua::Paragraph:
	{upctformaevalua::Paragraph}
	'Paragraph'
	'{'
		('text' text=EString)?
	'}';

Unique returns upctformaevalua::Unique:
	{upctformaevalua::Unique}
	'Unique'
	'{'
		('text' text=EString)?
	'}';

Multiple returns upctformaevalua::Multiple:
	{upctformaevalua::Multiple}
	(value?='value')?
	'Multiple'
	'{'
		('text' text=EString)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Hole returns upctformaevalua::Hole:
	{upctformaevalua::Hole}
	'Hole'
	'{'
		('text' text=EString)?
		('type' type=TypeHole)?
	'}';

enum TypeHole returns upctformaevalua::TypeHole:
				visible = 'visible' | hole = 'hole';

Assertion returns upctformaevalua::Assertion:
	{upctformaevalua::Assertion}
	(value?='value')?
	'Assertion'
	'{'
		('text' text=EString)?
	'}';

enum TypeGrade returns upctformaevalua::TypeGrade:
				highest = 'highest' | middle = 'middle' | lowest = 'lowest';
