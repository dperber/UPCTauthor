// automatically generated by Xtext
grammar org.xtext.Upctforma with org.eclipse.xtext.common.Terminals

import "platform:/resource/upctforma/model/upctforma.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Definition returns Definition:
	{Definition}
	'Definition'
	name=EString
	'{'
		('package' name = QualifiedName ';')?
		(imports+=Import ( "," imports+=Import)* )?
		('templates' '{' templates+=TemplateDef ( "," templates+=TemplateDef)* '}' )?
		('widgets' '{' widgets+=WidgetDef ( "," widgets+=WidgetDef)* '}' )?
		(unit=Unit )?
	'}';

QualifiedName: ID ('.' ID)* ;

Import:
	'import' importedNamespace=QualifiedNameWithWildcard ';' ;

QualifiedNameWithWildcard: QualifiedName '.*'? ;

Parameter returns Parameter:
	Parameter_Impl | Fixed | Variable | Tabs | Animations | DragAndDrops;


Element returns Element:
	Element_Impl | Column | Image | Widget | Text | Composite_Impl | Video | Simple_Impl | Parameter_Impl | Row | Fixed | Variable | Tabs | Animations | DragAndDrops;

Simple returns Simple:
	Simple_Impl | Image | Text | Video;



EString returns ecore::EString:
	STRING | ID;

TemplateDef returns TemplateDef:
	{TemplateDef}
	'TemplateDef'
	name=EString
	'{'
		(rows+=Row ( "," rows+=Row)*  )?
	'}';

WidgetDef returns WidgetDef:
	{WidgetDef}
	'WidgetDef'
	name=EString
	'{'
		(parameters+=Parameter ( "," parameters+=Parameter)* )?
	'}';

Unit returns Unit:
	'Unit'
	name=EString
	'{'
		sections+=Section ( "," sections+=Section)*  
	'}';

Column returns Column:
	{Column}
	'column'
	'{'
		('width' width=EString)?
		(elements+=Element ( "," elements+=Element)* )?
	'}';

Element_Impl returns Element:
	{Element}
	'Element'
	;

Image returns Image:
	{Image}
	'Image'
	'{'
		('url' url=EString)?
	'}';

Widget returns Widget:
	'Widget'
	'{'
		'typewidget' typewidget=[WidgetDef|EString]
		(arguments+=Simple ( "," arguments+=Simple)* )?
	'}';

Text returns Text:
	'Text'
	'{'
		paragraphs+=Paragraph ( "," paragraphs+=Paragraph)*  
	'}';

Composite_Impl returns Composite:
	{Composite}
	'Composite'
	;

Video returns Video:
	{Video}
	'Video'
	'{'
		('url' url=EString)?
	'}';

Simple_Impl returns Simple:
	{Simple}
	'Simple'
	;

Parameter_Impl returns Parameter:
	{Parameter}
	'Parameter'
	'{'
		('type' type=TypeSimpleElement)?
	'}';

Row returns Row:
	{Row}
	'row'
	'{'
		(columns+=Column ( "," columns+=Column)* )?
		('usetemplate' '{' usetemplate=UseTemplate)? '}'
	'}';

UseTemplate returns UseTemplate:
	{UseTemplate}
	(typetemplate=[TemplateDef|EString])?
	(arguments+=Argument ( "," arguments+=Argument)* )?
;
	
Fixed returns Fixed:
	{Fixed}
	'FParameter'
	'{'
		('type' type=TypeSimpleElement)?
	'}';

Variable returns Variable:
	{Variable}
	'VParameter'
	'{'
		('type' type=TypeSimpleElement)?
	'}';

Tabs returns Tabs:
	{Tabs}
	'TabsParameter'
	'{'
		('title' title=TypeSimpleElement)?
		('type' type=TypeSimpleElement)?
	'}';

Paragraph returns Paragraph:
	{Paragraph}
	('p' text=EString)?
;

enum TypeSimpleElement returns TypeSimpleElement:
				Text = 'Text' | Image = 'Image' | Video = 'Video' | Undefined = 'Undefined'; 

Section returns Section:
	{Section}
	'Section'
	name=EString
	'{'
		('image' image=EString)?
		('title' title=EString)?
		(rows+=Row ( "," rows+=Row)* )?
	'}';


Argument returns Argument:
	Argument_Impl | Image | Text | Video | Simple_Impl | Tab | Animation | DragAndDrop;


Argument_Impl returns Argument:
	{Argument}
	'Argument'
	;

Tab returns Tab:
	{Tab}
	'Tab'
	'{'
		(argument+=Simple ( "," argument+=Simple)* )?
	'}';
	
Animation returns Animation:
	{Animation}
	'Animation'
	'{'
		('width' width=EString)?
		(argument+=Simple ( "," argument+=Simple)* )?
	'}';
	
Animations returns Animations:
	{Animations}
	'AParameter'
	'{'
		('type' type=TypeSimpleElement)?
	'}';
		
DragAndDrop returns DragAndDrop:
	{DragAndDrop}
	'DragAndDrop'
	'{'
		(argument+=Simple ( "," argument+=Simple)* )?
	'}';
	
DragAndDrops returns DragAndDrops:
	{DragAndDrops}
	'DParameter'
	'{'
		('type' type=TypeSimpleElement)?
	'}';