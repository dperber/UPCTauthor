grammar org.xtext.Upctformagami with org.eclipse.xtext.common.Terminals

import "platform:/resource/upctformaevalua/model/upctformaevalua.ecore" as upctformaevalua
import "platform:/resource/upctforma/model/upctforma.ecore" as upctforma
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/upctformagami/model/upctformagami.ecore"

Gamification returns Gamification:
	{Gamification}
	'Gamification'
	'{'
		('import' imports+=Import ( "," imports+=Import)* ';' )?
		('badges' '{' badges+=Badge ( "," badges+=Badge)* '}' )?
		(widgets+=WidgetGamify ( "," widgets+=WidgetGamify)* )?
		(units+=UnitGamify ( "," units+=UnitGamify)* )?
	'}';

QualifiedName: ID ('.' ID)* ;

Import returns Import:
	{Import}
	
	importedNamespace=QualifiedNameWithWildcard  ;

QualifiedNameWithWildcard: QualifiedName '.*'? ;

WidgetGamify returns WidgetGamify:
	{WidgetGamify}
	'WidgetPointAchievement'
	'{'
		('widget' widgetref+=[upctforma::WidgetType|EString] ( "," widgetref+=[upctforma::WidgetType|EString])* )?
		('unit' unitref+=[upctforma::Unit|EString] ( "," unitref+=[upctforma::Unit|EString])* )	?
		(PointAchievementswidgetdef+=PointAchievement ( "," PointAchievementswidgetdef+=PointAchievement)* )?
		
	'}';

Badge returns Badge:
	{Badge}
	'Badge'
	name=EString
	'{'
		('description' description=EString)?
		('url' url=EString)?
	'}';

enum TypeState returns TypeState:
				open = 'open' | close = 'close';
UnitGamify returns UnitGamify:
	{UnitGamify}
	'UnitGamify'
	'{'
		('state' state = TypeState)?
		('contentunit' unitref =[upctforma::Unit|EString])?
		('evaluationunit' evalref =[upctformaevalua::EvaluationUnit|EString] )?
		('URL' URL=EString)?
		('image' image=EString)?
		(defbadges+=BadgeUnit ( "," defbadges+=BadgeUnit)* )?
		(PointAchievementsunit+=PointAchievement ( "," PointAchievementsunit+=PointAchievement)* )?
		('nextmissions' '{' missions+=Mission ( "," missions+=Mission)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

PointAchievement returns PointAchievement:
	{PointAchievement}
	'PointAchievement'
	'{'
		('type' type=TypeRule)?
		('PointAchievements' PointAchievements=EInt)?
		('attempt' attempt=EInt)?
		('InitialScore' InitialScore=EDouble)?
		('FinalScore' FinalScore=EDouble)?
	'}';

enum TypeRule returns TypeRule:
				completed = 'completed' | loginDaily = 'loginDaily' | scores = 'scores';

EInt returns ecore::EInt:
	'-'? INT;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

BadgeUnit returns BadgeUnit:
	{BadgeUnit}
	'BadgeUnit'
	'{'
		('type' type=TypeRule)?
		('badge' badge=[Badge|EString])?
	'}';

Mission returns Mission:
	{Mission}
	'Mission'
	'{'
		('type' type=TypeMissions)?
		('InitialScore' InitialScore=EDouble)?
		('FinalScore' FinalScore=EDouble)?
		('nextunit' nextunit=[upctforma::Unit|EString])?
		('nexteval' nexteval=[upctformaevalua::EvaluationUnit|EString])?
	'}';
	
enum TypeMissions returns TypeMissions:
				strong = 'strong' | weak = 'weak' | inhibitor = 'inhibitor' | scores = 'scores';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

/////////



EvaluationUnit returns upctformaevalua::EvaluationUnit:
	EvaluationUnit_Impl | Training | Final;


Parameter returns upctforma::Parameter:
	Parameter_Impl | Fixed | Variable;




ContentElement returns upctforma::ContentElement:
	ContentElement_Impl | Column | Image | Widget | Text | Composite_Impl | Video | SimpleElement_Impl | Parameter_Impl | Row | Fixed | Variable;


Argument returns upctforma::Argument:
	Argument_Impl | Image | Widget | Text | Video | SimpleElement_Impl | Tab | Animation | DragAndDrop | CompositeArgument_Impl;


Type returns upctforma::Type:
	Type_Impl | SimpleType | AggregatedType | WidgetType | ListType;

SimpleElement returns upctforma::SimpleElement:
	SimpleElement_Impl | Image | Text | Video;


Question returns upctformaevalua::Question:
	Question_Impl | UniqueAnswer | MultipleAnswer | FillingAnswer | TrueOrFalse;







Unit returns upctforma::Unit:
	'Unit'
	name=EString
	'{'
		('author' author=EString)?
		'sections' '{' sections+=Section ( "," sections+=Section)* '}' 
	'}';

WidgetType returns upctforma::WidgetType:
	{upctforma::WidgetType}
	'WidgetType'
	name=EString
	'{'
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Section returns upctforma::Section:
	{upctforma::Section}
	'Section'
	name=EString
	'{'
		('image' image=EString)?
		('title' title=EString)?
		('rows' '{' rows+=Row ( "," rows+=Row)* '}' )?
	'}';

Row returns upctforma::Row:
	{upctforma::Row}
	'Row'
	'{'
		('columns' '{' columns+=Column ( "," columns+=Column)* '}' )?
		('usetemplate' usetemplate=UseTemplate)?
	'}';

Column returns upctforma::Column:
	{upctforma::Column}
	'Column'
	'{'
		('width' width=EString)?
		('elements' '{' elements+=ContentElement ( "," elements+=ContentElement)* '}' )?
	'}';

UseTemplate returns upctforma::UseTemplate:
	{upctforma::UseTemplate}
	'UseTemplate'
	'{'
		('typetemplate' typetemplate=[upctforma::TemplateDef|EString])?
		('arguments' '{' arguments+=Argument ( "," arguments+=Argument)* '}' )?
	'}';

ContentElement_Impl returns upctforma::ContentElement:
	{upctforma::ContentElement}
	'ContentElement'
	;

Image returns upctforma::Image:
	{upctforma::Image}
	'Image'
	'{'
		('url' url=EString)?
	'}';

Widget returns upctforma::Widget:
	'Widget'
	name=EString
	'{'
		'widgettype' widgettype=[upctforma::WidgetType|EString]
		('widgetarguments' '{' widgetarguments+=Argument ( "," widgetarguments+=Argument)* '}' )?
	'}';

Text returns upctforma::Text:
	'Text'
	'{'
		'paragraphs' '{' paragraphs+=Paragraph ( "," paragraphs+=Paragraph)* '}' 
	'}';

Composite_Impl returns upctforma::Composite:
	{upctforma::Composite}
	'Composite'
	;

Video returns upctforma::Video:
	{upctforma::Video}
	'Video'
	'{'
		('url' url=EString)?
	'}';

SimpleElement_Impl returns upctforma::SimpleElement:
	{upctforma::SimpleElement}
	'SimpleElement'
	;

Parameter_Impl returns upctforma::Parameter:
	'Parameter'
	'{'
		'type' type=[upctforma::Type|EString]
	'}';

Fixed returns upctforma::Fixed:
	'Fixed'
	'{'
		'type' type=[upctforma::Type|EString]
	'}';

Variable returns upctforma::Variable:
	'Variable'
	'{'
		'type' type=[upctforma::Type|EString]
	'}';

Argument_Impl returns upctforma::Argument:
	{upctforma::Argument}
	'Argument'
	;

Tab returns upctforma::Tab:
	{upctforma::Tab}
	'Tab'
	'{'
		('arguments' '{' arguments+=SimpleElement ( "," arguments+=SimpleElement)* '}' )?
	'}';

Animation returns upctforma::Animation:
	{upctforma::Animation}
	'Animation'
	'{'
		('width' width=EString)?
		('image' image=EString)?
		('arguments' '{' arguments+=SimpleElement ( "," arguments+=SimpleElement)* '}' )?
	'}';

DragAndDrop returns upctforma::DragAndDrop:
	{upctforma::DragAndDrop}
	'DragAndDrop'
	'{'
		('arguments' '{' arguments+=SimpleElement ( "," arguments+=SimpleElement)* '}' )?
	'}';

CompositeArgument_Impl returns upctforma::CompositeArgument:
	{upctforma::CompositeArgument}
	'CompositeArgument'
	'{'
		('arguments' '{' arguments+=SimpleElement ( "," arguments+=SimpleElement)* '}' )?
	'}';

Paragraph returns upctforma::Paragraph:
	{upctforma::Paragraph}
	'Paragraph'
	'{'
		('text' text=EString)?
	'}';

Type_Impl returns upctforma::Type:
	{upctforma::Type}
	'Type'
	name=EString;

SimpleType returns upctforma::SimpleType:
	{upctforma::SimpleType}
	'SimpleType'
	name=EString
	'{'
		('type' type=TypeSimpleElement)?
	'}';

AggregatedType returns upctforma::AggregatedType:
	{upctforma::AggregatedType}
	'AggregatedType'
	name=EString
	'{'
		('type' '{' type+=SimpleType ( "," type+=SimpleType)* '}' )?
	'}';

ListType returns upctforma::ListType:
	{upctforma::ListType}
	'List'
	name=EString
	(listtype=[upctforma::SimpleType|EString])?
	;

enum TypeSimpleElement returns upctforma::TypeSimpleElement:
				Text = 'Text' | Image = 'Image' | Video = 'Video' | Undefined = 'Undefined';

TemplateDef returns upctforma::TemplateDef:
	{upctforma::TemplateDef}
	'TemplateDef'
	name=EString
	'{'
		('rows' '{' rows+=Row ( "," rows+=Row)* '}' )?
	'}';


EvaluationUnit_Impl returns upctformaevalua::EvaluationUnit:
	{upctformaevalua::EvaluationUnit}
	'EvaluationUnit'
	name=EString
	'{'
		('numberquestions' numberquestions=EInt)?
		('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	'}';


Question_Impl returns upctformaevalua::Question:
	{upctformaevalua::Question}
	'Question'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
	'}';

Training returns upctformaevalua::Training:
	{upctformaevalua::Training}
	'Training'
	name=EString
	'{'
		('numberquestions' numberquestions=EInt)?
		('Attempts' Attempts=EInt)?
		('grade' grade=TypeGrade)?
		('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	'}';

Final returns upctformaevalua::Final:
	{upctformaevalua::Final}
	'Final'
	name=EString
	'{'
		('numberquestions' numberquestions=EInt)?
		('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	'}';

UniqueAnswer returns upctformaevalua::UniqueAnswer:
	'UniqueAnswer'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
		('correctanswer' correctanswer=EInt)?
		'statements' statements=Paragraph0
		('answers' '{' answers+=Unique ( "," answers+=Unique)* '}' )?
	'}';

MultipleAnswer returns upctformaevalua::MultipleAnswer:
	'MultipleAnswer'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
		'statements' statements=Paragraph0
		('answers' '{' answers+=Multiple ( "," answers+=Multiple)* '}' )?
	'}';

FillingAnswer returns upctformaevalua::FillingAnswer:
	{upctformaevalua::FillingAnswer}
	'FillingAnswer'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
		('holes' '{' holes+=Hole ( "," holes+=Hole)* '}' )?
	'}';

TrueOrFalse returns upctformaevalua::TrueOrFalse:
	{upctformaevalua::TrueOrFalse}
	'TrueOrFalse'
	'{'
		('correctfeedback' correctfeedback=EString)?
		('incorrectfeedback' incorrectfeedback=EString)?
		('assertions' '{' assertions+=Assertion ( "," assertions+=Assertion)* '}' )?
	'}';

Paragraph0 returns upctformaevalua::Paragraph:
	{upctformaevalua::Paragraph}
	'Paragraph'
	'{'
		('text' text=EString)?
	'}';

Unique returns upctformaevalua::Unique:
	{upctformaevalua::Unique}
	'Unique'
	'{'
		('text' text=EString)?
	'}';

Multiple returns upctformaevalua::Multiple:
	{upctformaevalua::Multiple}
	(value?='value')?
	'Multiple'
	'{'
		('text' text=EString)?
	'}';


Hole returns upctformaevalua::Hole:
	{upctformaevalua::Hole}
	'Hole'
	'{'
		('text' text=EString)?
		('type' type=TypeHole)?
	'}';

enum TypeHole returns upctformaevalua::TypeHole:
				visible = 'visible' | hole = 'hole';

Assertion returns upctformaevalua::Assertion:
	{upctformaevalua::Assertion}
	(value?='value')?
	'Assertion'
	'{'
		('text' text=EString)?
	'}';

enum TypeGrade returns upctformaevalua::TypeGrade:
				highest = 'highest' | middle = 'middle' | lowest = 'lowest';
