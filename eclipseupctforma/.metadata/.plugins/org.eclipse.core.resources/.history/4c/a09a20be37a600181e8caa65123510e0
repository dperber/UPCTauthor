// automatically generated by Xtext
grammar org.xtext.Upctforma with org.eclipse.xtext.common.Terminals

import "platform:/resource/upctforma/model/upctforma.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ContentDefinition returns ContentDefinition:
	{ContentDefinition}
	'ContentDefinition'
	name=EString
	'{'
		('package' name = QualifiedName ';')?
		(imports+=Import ( "," imports+=Import)* )?
		('types' '{' types+=Type ( "," types+=Type)* '}' )?
		('templates' '{' templates+=TemplateDef ( "," templates+=TemplateDef)* '}' )?
		(unit=Unit )?
	'}';

QualifiedName: ID ('.' ID)* ;

Import:
	'import' importedNamespace=QualifiedNameWithWildcard ';' ;

QualifiedNameWithWildcard: QualifiedName '.*'? ;

Type returns Type:
	Type_Impl | SimpleType | RecordType | WidgetType | ListType | CompositeType_Impl;


ContentElement returns ContentElement:
	ContentElement_Impl | Column | Image | Widget | Text | Composite_Impl | Video | SimpleElement_Impl | PlaceHolder | Row | Game | RecordValue | ListValue;


	
CompositeType returns CompositeType:
	CompositeType_Impl | RecordType | ListType;

EString returns ecore::EString:
	STRING | ID;

TemplateDef returns TemplateDef:
	{TemplateDef}
	'TemplateDef'
	name=EString
	'{'
		(rows+=Row ( "," rows+=Row)* )?
	'}';

Unit returns Unit:
	'Unit'
	name=EString
	author=EString
	'{'
		sections+=Section ( "," sections+=Section)*
	'}';

Type_Impl returns Type:
	{Type}
	'Type'
	name=EString;

Row returns Row:
	{Row}
	'row'
	'{'
		(columns+=Column ( "," columns+=Column)* )?
		('usetemplate' usetemplate=UseTemplate)?
	'}';

Column returns Column:
	{Column}
	'column'
	'{'
		('width' width=EString)?
		(elements+=ContentElement ( "," elements+=ContentElement)* )?
	'}';

UseTemplate returns UseTemplate:
	{UseTemplate}
	(typetemplate=[TemplateDef|EString])?
	('{' templateelements+=ContentElement ( "," templateelements+=ContentElement)* )? '}'
	;

ContentElement_Impl returns ContentElement:
	{ContentElement}
	'ContentElement'
	;

Image returns Image:
	{Image}
	'Image'
	'{'
		('url' url=EString)?
	'}';

Widget returns Widget:
	'Widget'
	name=EString
		'type' widgettype=[WidgetType|EString]
		('{' widgetelements+=ContentElement ( "," widgetelements+=ContentElement)* )? '}'
	;

Text returns Text:
	'Text'
	'{'
		paragraphs+=Paragraph ( "," paragraphs+=Paragraph)* 
	'}';

Composite_Impl returns Composite:
	{Composite}
	'Composite'
	;

Video returns Video:
	{Video}
	'Video'
	'{'
		('id' id=EString)?
	'}';



SimpleElement_Impl returns SimpleElement:
	{SimpleElement}
	'SimpleElement'
	;
	
PlaceHolder returns PlaceHolder:
	'Placeholder'
	(type=[Type|EString])
	;


Game returns Game:
	{Game}
	'Game'
	'{'
		('id' id=EString)?
	'}';


FieldValue returns FieldValue:
	name=EString
	fieldvalue=ContentElement
	;


RecordValue returns RecordValue:
	'Record'
	'{'
		recordvalues+=FieldValue ( "," recordvalues+=FieldValue)* 
	'}';

ListValue returns ListValue:
	'List'
	'{'
		listvalues+=ContentElement ( "," listvalues+=ContentElement)* 
	'}';
	
WidgetType returns WidgetType:
	{WidgetType}
	'widget'
	name=EString
	'{'
		'(' widgettypeelements+=[Type|EString] ( "," widgettypeelements+=[Type|EString])* ')' 
		
	'}';	

CompositeType_Impl returns CompositeType:
	{CompositeType}
	'CompositeType'
	name=EString;


Paragraph returns Paragraph:
	{Paragraph}
	('p' text=EString)?
	;

Section returns Section:
	{Section}
	'Section'
	name=EString
	'{'
		('image' image=EString)?
		('title' title=EString)?
		(rows+=Row ( "," rows+=Row)* )?
	'}';


terminal Terminales:
	'Videos' | 'Imagen' | 'Texto' | 'Game'
;

SimpleType returns SimpleType:
	{SimpleType}
	name=Terminales
	;
	

RecordType returns RecordType:
	'Record'
	name=EString
	'{'
		recordtype+=Field ( "," recordtype+=Field)*
	'}';


Field returns Field:
	name=EString
	fieldtype=[Type|Terminales]
	;


ListType returns ListType:
	'List'
	name=EString
	listtype=[Type|EString]
	;
	
